/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the ProductPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductPlan{}

// ProductPlan struct for ProductPlan
type ProductPlan struct {
	// The ID of the resource.
	Id *int32 `json:"id,omitempty"`
	// The unique identifier for the payment plan.
	Uniqid *string `json:"uniqid,omitempty"`
	// The shop ID to which this resource belongs.
	ShopId *int32 `json:"shop_id,omitempty"`
	// ID of the product subscription.
	ProductId *int32 `json:"product_id,omitempty"`
	// The status of the subscription
	Status *string `json:"status,omitempty"`
	// The stock of the subscription plan
	Stock *int32 `json:"stock,omitempty"`
	// DEPRECATED: The webhook to be sent for events related to thsi product.
	DynamicWebhook *string `json:"dynamic_webhook,omitempty"`
	// The service text to be delievered upon delivery (it product type is SERVICE).
	ServiceText *string `json:"service_text,omitempty"`
	// The title of the plan.
	Title *string `json:"title,omitempty"`
	// The price of the subscription plan
	Price *float32 `json:"price,omitempty"`
	// The default discount applied to this plan
	PriceDiscount *float32 `json:"price_discount,omitempty"`
	// The description for the subscription plan
	Description *string `json:"description,omitempty"`
	// Whether a trial period is enabled for the subscription plan. Will be null if product is not a subscription
	TrialPeriod *int32 `json:"trial_period,omitempty"`
	// How often the customer should be invoiced for the subscription.
	RecurringInterval *string `json:"recurring_interval,omitempty"`
	// How many times the customer should be invoiced per interval
	RecurringIntervalCount *int32 `json:"recurring_interval_count,omitempty"`
	// When the customer will be billed for the subscription.
	PaymentType *string `json:"payment_type,omitempty"`
	// How subscription renewals should be handled.
	RenewType *string `json:"renew_type,omitempty"`
	// How customers should be billed for the subscription if they purchase through the interval.
	BillingType *string `json:"billing_type,omitempty"`
	// When the subscription plan was created
	CreatedAt *int32 `json:"created_at,omitempty"`
	// When the subscription plan was last updated
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// Default currency for the subscription product
	ProductCurrency *string `json:"product_currency,omitempty"`
	// The stock of the subscription plan
	ProductStock *int32 `json:"product_stock,omitempty"`
	// The type of the product
	ProductType *string `json:"product_type,omitempty"`
	ProductSubtype *string `json:"product_subtype,omitempty"`
	// The real stock of the subscription plan
	RealStock *int32 `json:"real_stock,omitempty"`
	PriceConversions *ProductPlanPriceConversions `json:"price_conversions,omitempty"`
}

// NewProductPlan instantiates a new ProductPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductPlan() *ProductPlan {
	this := ProductPlan{}
	return &this
}

// NewProductPlanWithDefaults instantiates a new ProductPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductPlanWithDefaults() *ProductPlan {
	this := ProductPlan{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductPlan) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductPlan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProductPlan) SetId(v int32) {
	o.Id = &v
}

// GetUniqid returns the Uniqid field value if set, zero value otherwise.
func (o *ProductPlan) GetUniqid() string {
	if o == nil || IsNil(o.Uniqid) {
		var ret string
		return ret
	}
	return *o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqid) {
		return nil, false
	}
	return o.Uniqid, true
}

// HasUniqid returns a boolean if a field has been set.
func (o *ProductPlan) HasUniqid() bool {
	if o != nil && !IsNil(o.Uniqid) {
		return true
	}

	return false
}

// SetUniqid gets a reference to the given string and assigns it to the Uniqid field.
func (o *ProductPlan) SetUniqid(v string) {
	o.Uniqid = &v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *ProductPlan) GetShopId() int32 {
	if o == nil || IsNil(o.ShopId) {
		var ret int32
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetShopIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *ProductPlan) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int32 and assigns it to the ShopId field.
func (o *ProductPlan) SetShopId(v int32) {
	o.ShopId = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductPlan) GetProductId() int32 {
	if o == nil || IsNil(o.ProductId) {
		var ret int32
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetProductIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductPlan) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int32 and assigns it to the ProductId field.
func (o *ProductPlan) SetProductId(v int32) {
	o.ProductId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProductPlan) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProductPlan) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ProductPlan) SetStatus(v string) {
	o.Status = &v
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *ProductPlan) GetStock() int32 {
	if o == nil || IsNil(o.Stock) {
		var ret int32
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetStockOk() (*int32, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *ProductPlan) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given int32 and assigns it to the Stock field.
func (o *ProductPlan) SetStock(v int32) {
	o.Stock = &v
}

// GetDynamicWebhook returns the DynamicWebhook field value if set, zero value otherwise.
func (o *ProductPlan) GetDynamicWebhook() string {
	if o == nil || IsNil(o.DynamicWebhook) {
		var ret string
		return ret
	}
	return *o.DynamicWebhook
}

// GetDynamicWebhookOk returns a tuple with the DynamicWebhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetDynamicWebhookOk() (*string, bool) {
	if o == nil || IsNil(o.DynamicWebhook) {
		return nil, false
	}
	return o.DynamicWebhook, true
}

// HasDynamicWebhook returns a boolean if a field has been set.
func (o *ProductPlan) HasDynamicWebhook() bool {
	if o != nil && !IsNil(o.DynamicWebhook) {
		return true
	}

	return false
}

// SetDynamicWebhook gets a reference to the given string and assigns it to the DynamicWebhook field.
func (o *ProductPlan) SetDynamicWebhook(v string) {
	o.DynamicWebhook = &v
}

// GetServiceText returns the ServiceText field value if set, zero value otherwise.
func (o *ProductPlan) GetServiceText() string {
	if o == nil || IsNil(o.ServiceText) {
		var ret string
		return ret
	}
	return *o.ServiceText
}

// GetServiceTextOk returns a tuple with the ServiceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetServiceTextOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceText) {
		return nil, false
	}
	return o.ServiceText, true
}

// HasServiceText returns a boolean if a field has been set.
func (o *ProductPlan) HasServiceText() bool {
	if o != nil && !IsNil(o.ServiceText) {
		return true
	}

	return false
}

// SetServiceText gets a reference to the given string and assigns it to the ServiceText field.
func (o *ProductPlan) SetServiceText(v string) {
	o.ServiceText = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProductPlan) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProductPlan) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProductPlan) SetTitle(v string) {
	o.Title = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ProductPlan) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductPlan) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ProductPlan) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceDiscount returns the PriceDiscount field value if set, zero value otherwise.
func (o *ProductPlan) GetPriceDiscount() float32 {
	if o == nil || IsNil(o.PriceDiscount) {
		var ret float32
		return ret
	}
	return *o.PriceDiscount
}

// GetPriceDiscountOk returns a tuple with the PriceDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetPriceDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceDiscount) {
		return nil, false
	}
	return o.PriceDiscount, true
}

// HasPriceDiscount returns a boolean if a field has been set.
func (o *ProductPlan) HasPriceDiscount() bool {
	if o != nil && !IsNil(o.PriceDiscount) {
		return true
	}

	return false
}

// SetPriceDiscount gets a reference to the given float32 and assigns it to the PriceDiscount field.
func (o *ProductPlan) SetPriceDiscount(v float32) {
	o.PriceDiscount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductPlan) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductPlan) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductPlan) SetDescription(v string) {
	o.Description = &v
}

// GetTrialPeriod returns the TrialPeriod field value if set, zero value otherwise.
func (o *ProductPlan) GetTrialPeriod() int32 {
	if o == nil || IsNil(o.TrialPeriod) {
		var ret int32
		return ret
	}
	return *o.TrialPeriod
}

// GetTrialPeriodOk returns a tuple with the TrialPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetTrialPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.TrialPeriod) {
		return nil, false
	}
	return o.TrialPeriod, true
}

// HasTrialPeriod returns a boolean if a field has been set.
func (o *ProductPlan) HasTrialPeriod() bool {
	if o != nil && !IsNil(o.TrialPeriod) {
		return true
	}

	return false
}

// SetTrialPeriod gets a reference to the given int32 and assigns it to the TrialPeriod field.
func (o *ProductPlan) SetTrialPeriod(v int32) {
	o.TrialPeriod = &v
}

// GetRecurringInterval returns the RecurringInterval field value if set, zero value otherwise.
func (o *ProductPlan) GetRecurringInterval() string {
	if o == nil || IsNil(o.RecurringInterval) {
		var ret string
		return ret
	}
	return *o.RecurringInterval
}

// GetRecurringIntervalOk returns a tuple with the RecurringInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetRecurringIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.RecurringInterval) {
		return nil, false
	}
	return o.RecurringInterval, true
}

// HasRecurringInterval returns a boolean if a field has been set.
func (o *ProductPlan) HasRecurringInterval() bool {
	if o != nil && !IsNil(o.RecurringInterval) {
		return true
	}

	return false
}

// SetRecurringInterval gets a reference to the given string and assigns it to the RecurringInterval field.
func (o *ProductPlan) SetRecurringInterval(v string) {
	o.RecurringInterval = &v
}

// GetRecurringIntervalCount returns the RecurringIntervalCount field value if set, zero value otherwise.
func (o *ProductPlan) GetRecurringIntervalCount() int32 {
	if o == nil || IsNil(o.RecurringIntervalCount) {
		var ret int32
		return ret
	}
	return *o.RecurringIntervalCount
}

// GetRecurringIntervalCountOk returns a tuple with the RecurringIntervalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetRecurringIntervalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RecurringIntervalCount) {
		return nil, false
	}
	return o.RecurringIntervalCount, true
}

// HasRecurringIntervalCount returns a boolean if a field has been set.
func (o *ProductPlan) HasRecurringIntervalCount() bool {
	if o != nil && !IsNil(o.RecurringIntervalCount) {
		return true
	}

	return false
}

// SetRecurringIntervalCount gets a reference to the given int32 and assigns it to the RecurringIntervalCount field.
func (o *ProductPlan) SetRecurringIntervalCount(v int32) {
	o.RecurringIntervalCount = &v
}

// GetPaymentType returns the PaymentType field value if set, zero value otherwise.
func (o *ProductPlan) GetPaymentType() string {
	if o == nil || IsNil(o.PaymentType) {
		var ret string
		return ret
	}
	return *o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetPaymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentType) {
		return nil, false
	}
	return o.PaymentType, true
}

// HasPaymentType returns a boolean if a field has been set.
func (o *ProductPlan) HasPaymentType() bool {
	if o != nil && !IsNil(o.PaymentType) {
		return true
	}

	return false
}

// SetPaymentType gets a reference to the given string and assigns it to the PaymentType field.
func (o *ProductPlan) SetPaymentType(v string) {
	o.PaymentType = &v
}

// GetRenewType returns the RenewType field value if set, zero value otherwise.
func (o *ProductPlan) GetRenewType() string {
	if o == nil || IsNil(o.RenewType) {
		var ret string
		return ret
	}
	return *o.RenewType
}

// GetRenewTypeOk returns a tuple with the RenewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetRenewTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RenewType) {
		return nil, false
	}
	return o.RenewType, true
}

// HasRenewType returns a boolean if a field has been set.
func (o *ProductPlan) HasRenewType() bool {
	if o != nil && !IsNil(o.RenewType) {
		return true
	}

	return false
}

// SetRenewType gets a reference to the given string and assigns it to the RenewType field.
func (o *ProductPlan) SetRenewType(v string) {
	o.RenewType = &v
}

// GetBillingType returns the BillingType field value if set, zero value otherwise.
func (o *ProductPlan) GetBillingType() string {
	if o == nil || IsNil(o.BillingType) {
		var ret string
		return ret
	}
	return *o.BillingType
}

// GetBillingTypeOk returns a tuple with the BillingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetBillingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BillingType) {
		return nil, false
	}
	return o.BillingType, true
}

// HasBillingType returns a boolean if a field has been set.
func (o *ProductPlan) HasBillingType() bool {
	if o != nil && !IsNil(o.BillingType) {
		return true
	}

	return false
}

// SetBillingType gets a reference to the given string and assigns it to the BillingType field.
func (o *ProductPlan) SetBillingType(v string) {
	o.BillingType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ProductPlan) GetCreatedAt() int32 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetCreatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ProductPlan) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *ProductPlan) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ProductPlan) GetUpdatedAt() int32 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ProductPlan) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *ProductPlan) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetProductCurrency returns the ProductCurrency field value if set, zero value otherwise.
func (o *ProductPlan) GetProductCurrency() string {
	if o == nil || IsNil(o.ProductCurrency) {
		var ret string
		return ret
	}
	return *o.ProductCurrency
}

// GetProductCurrencyOk returns a tuple with the ProductCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetProductCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCurrency) {
		return nil, false
	}
	return o.ProductCurrency, true
}

// HasProductCurrency returns a boolean if a field has been set.
func (o *ProductPlan) HasProductCurrency() bool {
	if o != nil && !IsNil(o.ProductCurrency) {
		return true
	}

	return false
}

// SetProductCurrency gets a reference to the given string and assigns it to the ProductCurrency field.
func (o *ProductPlan) SetProductCurrency(v string) {
	o.ProductCurrency = &v
}

// GetProductStock returns the ProductStock field value if set, zero value otherwise.
func (o *ProductPlan) GetProductStock() int32 {
	if o == nil || IsNil(o.ProductStock) {
		var ret int32
		return ret
	}
	return *o.ProductStock
}

// GetProductStockOk returns a tuple with the ProductStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetProductStockOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductStock) {
		return nil, false
	}
	return o.ProductStock, true
}

// HasProductStock returns a boolean if a field has been set.
func (o *ProductPlan) HasProductStock() bool {
	if o != nil && !IsNil(o.ProductStock) {
		return true
	}

	return false
}

// SetProductStock gets a reference to the given int32 and assigns it to the ProductStock field.
func (o *ProductPlan) SetProductStock(v int32) {
	o.ProductStock = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *ProductPlan) GetProductType() string {
	if o == nil || IsNil(o.ProductType) {
		var ret string
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetProductTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *ProductPlan) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given string and assigns it to the ProductType field.
func (o *ProductPlan) SetProductType(v string) {
	o.ProductType = &v
}

// GetProductSubtype returns the ProductSubtype field value if set, zero value otherwise.
func (o *ProductPlan) GetProductSubtype() string {
	if o == nil || IsNil(o.ProductSubtype) {
		var ret string
		return ret
	}
	return *o.ProductSubtype
}

// GetProductSubtypeOk returns a tuple with the ProductSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetProductSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductSubtype) {
		return nil, false
	}
	return o.ProductSubtype, true
}

// HasProductSubtype returns a boolean if a field has been set.
func (o *ProductPlan) HasProductSubtype() bool {
	if o != nil && !IsNil(o.ProductSubtype) {
		return true
	}

	return false
}

// SetProductSubtype gets a reference to the given string and assigns it to the ProductSubtype field.
func (o *ProductPlan) SetProductSubtype(v string) {
	o.ProductSubtype = &v
}

// GetRealStock returns the RealStock field value if set, zero value otherwise.
func (o *ProductPlan) GetRealStock() int32 {
	if o == nil || IsNil(o.RealStock) {
		var ret int32
		return ret
	}
	return *o.RealStock
}

// GetRealStockOk returns a tuple with the RealStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetRealStockOk() (*int32, bool) {
	if o == nil || IsNil(o.RealStock) {
		return nil, false
	}
	return o.RealStock, true
}

// HasRealStock returns a boolean if a field has been set.
func (o *ProductPlan) HasRealStock() bool {
	if o != nil && !IsNil(o.RealStock) {
		return true
	}

	return false
}

// SetRealStock gets a reference to the given int32 and assigns it to the RealStock field.
func (o *ProductPlan) SetRealStock(v int32) {
	o.RealStock = &v
}

// GetPriceConversions returns the PriceConversions field value if set, zero value otherwise.
func (o *ProductPlan) GetPriceConversions() ProductPlanPriceConversions {
	if o == nil || IsNil(o.PriceConversions) {
		var ret ProductPlanPriceConversions
		return ret
	}
	return *o.PriceConversions
}

// GetPriceConversionsOk returns a tuple with the PriceConversions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlan) GetPriceConversionsOk() (*ProductPlanPriceConversions, bool) {
	if o == nil || IsNil(o.PriceConversions) {
		return nil, false
	}
	return o.PriceConversions, true
}

// HasPriceConversions returns a boolean if a field has been set.
func (o *ProductPlan) HasPriceConversions() bool {
	if o != nil && !IsNil(o.PriceConversions) {
		return true
	}

	return false
}

// SetPriceConversions gets a reference to the given ProductPlanPriceConversions and assigns it to the PriceConversions field.
func (o *ProductPlan) SetPriceConversions(v ProductPlanPriceConversions) {
	o.PriceConversions = &v
}

func (o ProductPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uniqid) {
		toSerialize["uniqid"] = o.Uniqid
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Stock) {
		toSerialize["stock"] = o.Stock
	}
	if !IsNil(o.DynamicWebhook) {
		toSerialize["dynamic_webhook"] = o.DynamicWebhook
	}
	if !IsNil(o.ServiceText) {
		toSerialize["service_text"] = o.ServiceText
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceDiscount) {
		toSerialize["price_discount"] = o.PriceDiscount
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TrialPeriod) {
		toSerialize["trial_period"] = o.TrialPeriod
	}
	if !IsNil(o.RecurringInterval) {
		toSerialize["recurring_interval"] = o.RecurringInterval
	}
	if !IsNil(o.RecurringIntervalCount) {
		toSerialize["recurring_interval_count"] = o.RecurringIntervalCount
	}
	if !IsNil(o.PaymentType) {
		toSerialize["payment_type"] = o.PaymentType
	}
	if !IsNil(o.RenewType) {
		toSerialize["renew_type"] = o.RenewType
	}
	if !IsNil(o.BillingType) {
		toSerialize["billing_type"] = o.BillingType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ProductCurrency) {
		toSerialize["product_currency"] = o.ProductCurrency
	}
	if !IsNil(o.ProductStock) {
		toSerialize["product_stock"] = o.ProductStock
	}
	if !IsNil(o.ProductType) {
		toSerialize["product_type"] = o.ProductType
	}
	if !IsNil(o.ProductSubtype) {
		toSerialize["product_subtype"] = o.ProductSubtype
	}
	if !IsNil(o.RealStock) {
		toSerialize["real_stock"] = o.RealStock
	}
	if !IsNil(o.PriceConversions) {
		toSerialize["price_conversions"] = o.PriceConversions
	}
	return toSerialize, nil
}

type NullableProductPlan struct {
	value *ProductPlan
	isSet bool
}

func (v NullableProductPlan) Get() *ProductPlan {
	return v.value
}

func (v *NullableProductPlan) Set(val *ProductPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableProductPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableProductPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductPlan(val *ProductPlan) *NullableProductPlan {
	return &NullableProductPlan{value: val, isSet: true}
}

func (v NullableProductPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


