/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Category type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Category{}

// Category struct for Category
type Category struct {
	// ID of the resource
	Id *int32 `json:"id,omitempty"`
	// Unique ID of the resource, used as reference across the API.
	Uniqid *string `json:"uniqid,omitempty"`
	// The shop ID to which this category belongs.
	ShopId *int32 `json:"shop_id,omitempty"`
	// Title of the category.
	Title *string `json:"title,omitempty"`
	// Whether or not the category is visible on the merchant storefront.
	Unlisted *bool `json:"unlisted,omitempty"`
	// Sort order of this category.
	SortPriority *int32 `json:"sort_priority,omitempty"`
	// Timestamp for the creation of the category.
	CreatedAt *int32 `json:"created_at,omitempty"`
	// Date, available if the category has been edited.
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// User ID of the user who updated the category.
	UpdatedBy *int32 `json:"updated_by,omitempty"`
	// Array of products. Please note that the product object contains limited fields, to get the full product object please use the Products API endpoint.
	ProductsBound []CategoryProduct `json:"products_bound,omitempty"`
	// How many products are present in the products_bound array
	ProductsCount *int32 `json:"products_count,omitempty"`
	// Array of groups.
	GroupsBound []CategoryGroupsBoundInner `json:"groups_bound,omitempty"`
	// How many groups are present in the groups_bound array
	GroupsCount *int32 `json:"groups_count,omitempty"`
}

// NewCategory instantiates a new Category object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategory() *Category {
	this := Category{}
	return &this
}

// NewCategoryWithDefaults instantiates a new Category object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryWithDefaults() *Category {
	this := Category{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Category) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Category) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Category) SetId(v int32) {
	o.Id = &v
}

// GetUniqid returns the Uniqid field value if set, zero value otherwise.
func (o *Category) GetUniqid() string {
	if o == nil || IsNil(o.Uniqid) {
		var ret string
		return ret
	}
	return *o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqid) {
		return nil, false
	}
	return o.Uniqid, true
}

// HasUniqid returns a boolean if a field has been set.
func (o *Category) HasUniqid() bool {
	if o != nil && !IsNil(o.Uniqid) {
		return true
	}

	return false
}

// SetUniqid gets a reference to the given string and assigns it to the Uniqid field.
func (o *Category) SetUniqid(v string) {
	o.Uniqid = &v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *Category) GetShopId() int32 {
	if o == nil || IsNil(o.ShopId) {
		var ret int32
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetShopIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *Category) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int32 and assigns it to the ShopId field.
func (o *Category) SetShopId(v int32) {
	o.ShopId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Category) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Category) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Category) SetTitle(v string) {
	o.Title = &v
}

// GetUnlisted returns the Unlisted field value if set, zero value otherwise.
func (o *Category) GetUnlisted() bool {
	if o == nil || IsNil(o.Unlisted) {
		var ret bool
		return ret
	}
	return *o.Unlisted
}

// GetUnlistedOk returns a tuple with the Unlisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetUnlistedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unlisted) {
		return nil, false
	}
	return o.Unlisted, true
}

// HasUnlisted returns a boolean if a field has been set.
func (o *Category) HasUnlisted() bool {
	if o != nil && !IsNil(o.Unlisted) {
		return true
	}

	return false
}

// SetUnlisted gets a reference to the given bool and assigns it to the Unlisted field.
func (o *Category) SetUnlisted(v bool) {
	o.Unlisted = &v
}

// GetSortPriority returns the SortPriority field value if set, zero value otherwise.
func (o *Category) GetSortPriority() int32 {
	if o == nil || IsNil(o.SortPriority) {
		var ret int32
		return ret
	}
	return *o.SortPriority
}

// GetSortPriorityOk returns a tuple with the SortPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetSortPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.SortPriority) {
		return nil, false
	}
	return o.SortPriority, true
}

// HasSortPriority returns a boolean if a field has been set.
func (o *Category) HasSortPriority() bool {
	if o != nil && !IsNil(o.SortPriority) {
		return true
	}

	return false
}

// SetSortPriority gets a reference to the given int32 and assigns it to the SortPriority field.
func (o *Category) SetSortPriority(v int32) {
	o.SortPriority = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Category) GetCreatedAt() int32 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetCreatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Category) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *Category) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Category) GetUpdatedAt() int32 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Category) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *Category) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Category) GetUpdatedBy() int32 {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetUpdatedByOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Category) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *Category) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

// GetProductsBound returns the ProductsBound field value if set, zero value otherwise.
func (o *Category) GetProductsBound() []CategoryProduct {
	if o == nil || IsNil(o.ProductsBound) {
		var ret []CategoryProduct
		return ret
	}
	return o.ProductsBound
}

// GetProductsBoundOk returns a tuple with the ProductsBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetProductsBoundOk() ([]CategoryProduct, bool) {
	if o == nil || IsNil(o.ProductsBound) {
		return nil, false
	}
	return o.ProductsBound, true
}

// HasProductsBound returns a boolean if a field has been set.
func (o *Category) HasProductsBound() bool {
	if o != nil && !IsNil(o.ProductsBound) {
		return true
	}

	return false
}

// SetProductsBound gets a reference to the given []CategoryProduct and assigns it to the ProductsBound field.
func (o *Category) SetProductsBound(v []CategoryProduct) {
	o.ProductsBound = v
}

// GetProductsCount returns the ProductsCount field value if set, zero value otherwise.
func (o *Category) GetProductsCount() int32 {
	if o == nil || IsNil(o.ProductsCount) {
		var ret int32
		return ret
	}
	return *o.ProductsCount
}

// GetProductsCountOk returns a tuple with the ProductsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetProductsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductsCount) {
		return nil, false
	}
	return o.ProductsCount, true
}

// HasProductsCount returns a boolean if a field has been set.
func (o *Category) HasProductsCount() bool {
	if o != nil && !IsNil(o.ProductsCount) {
		return true
	}

	return false
}

// SetProductsCount gets a reference to the given int32 and assigns it to the ProductsCount field.
func (o *Category) SetProductsCount(v int32) {
	o.ProductsCount = &v
}

// GetGroupsBound returns the GroupsBound field value if set, zero value otherwise.
func (o *Category) GetGroupsBound() []CategoryGroupsBoundInner {
	if o == nil || IsNil(o.GroupsBound) {
		var ret []CategoryGroupsBoundInner
		return ret
	}
	return o.GroupsBound
}

// GetGroupsBoundOk returns a tuple with the GroupsBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetGroupsBoundOk() ([]CategoryGroupsBoundInner, bool) {
	if o == nil || IsNil(o.GroupsBound) {
		return nil, false
	}
	return o.GroupsBound, true
}

// HasGroupsBound returns a boolean if a field has been set.
func (o *Category) HasGroupsBound() bool {
	if o != nil && !IsNil(o.GroupsBound) {
		return true
	}

	return false
}

// SetGroupsBound gets a reference to the given []CategoryGroupsBoundInner and assigns it to the GroupsBound field.
func (o *Category) SetGroupsBound(v []CategoryGroupsBoundInner) {
	o.GroupsBound = v
}

// GetGroupsCount returns the GroupsCount field value if set, zero value otherwise.
func (o *Category) GetGroupsCount() int32 {
	if o == nil || IsNil(o.GroupsCount) {
		var ret int32
		return ret
	}
	return *o.GroupsCount
}

// GetGroupsCountOk returns a tuple with the GroupsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetGroupsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupsCount) {
		return nil, false
	}
	return o.GroupsCount, true
}

// HasGroupsCount returns a boolean if a field has been set.
func (o *Category) HasGroupsCount() bool {
	if o != nil && !IsNil(o.GroupsCount) {
		return true
	}

	return false
}

// SetGroupsCount gets a reference to the given int32 and assigns it to the GroupsCount field.
func (o *Category) SetGroupsCount(v int32) {
	o.GroupsCount = &v
}

func (o Category) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Category) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uniqid) {
		toSerialize["uniqid"] = o.Uniqid
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Unlisted) {
		toSerialize["unlisted"] = o.Unlisted
	}
	if !IsNil(o.SortPriority) {
		toSerialize["sort_priority"] = o.SortPriority
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if !IsNil(o.ProductsBound) {
		toSerialize["products_bound"] = o.ProductsBound
	}
	if !IsNil(o.ProductsCount) {
		toSerialize["products_count"] = o.ProductsCount
	}
	if !IsNil(o.GroupsBound) {
		toSerialize["groups_bound"] = o.GroupsBound
	}
	if !IsNil(o.GroupsCount) {
		toSerialize["groups_count"] = o.GroupsCount
	}
	return toSerialize, nil
}

type NullableCategory struct {
	value *Category
	isSet bool
}

func (v NullableCategory) Get() *Category {
	return v.value
}

func (v *NullableCategory) Set(val *Category) {
	v.value = val
	v.isSet = true
}

func (v NullableCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategory(val *Category) *NullableCategory {
	return &NullableCategory{value: val, isSet: true}
}

func (v NullableCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


