/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the ProductPlanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductPlanRequest{}

// ProductPlanRequest struct for ProductPlanRequest
type ProductPlanRequest struct {
	// The title of the plan.
	Title *string `json:"title,omitempty"`
	// The price of the subscription plan
	Price *float32 `json:"price,omitempty"`
	// The default discount applied to this plan as a percent
	PriceDiscount *float32 `json:"price_discount,omitempty"`
	// The description for the subscription plan
	Description *string `json:"description,omitempty"`
	// The trial period of the subscription plan in days
	TrialPeriod *string `json:"trial_period,omitempty"`
	// The recurring interval type. How often the customer should be invoiced for the subscription.
	RecurringInterval *string `json:"recurring_interval,omitempty"`
	// Count of days, weeks, months or years in each subscription's billing period
	RecurringIntervalCount *string `json:"recurring_interval_count,omitempty"`
	// When the customer will be billed for the subscription. ADVANCE â€” payment will happen on the first day of the period; ARREARS - payment will happen on the last day of the period.
	PaymentType *string `json:"payment_type,omitempty"`
	// How subscription renewals should be handled. CALENDAR - payment will happen on the first day of the period (Monday for WEEK, 1st day for MONTH, January 1st for YEAR); ANNIVERSARY - payment will happen on the same day for all invoices (if subscription was created on March 14th, payment will happen on the 14th of each month (if interval is MONTH))
	RenewType *string `json:"renew_type,omitempty"`
	// How customers should be billed for the subscription if they purchase through the interval. FULL - full price will be invoiced even if only one day left in subscription period; PRORRATED - price will be prorated to used pariod part. If only 50% of the period is left, invoice's total will be 50%
	BillingType *string `json:"billing_type,omitempty"`
	// UNIMPLEMENTED
	Serials *string `json:"serials,omitempty"`
	// UNIMPLEMENTED
	ServiceText *string `json:"service_text,omitempty"`
	// DEPRECATED
	DynamicWebhook *string `json:"dynamic_webhook,omitempty"`
	// DEPRECATED
	Stock *string `json:"stock,omitempty"`
	// DEPRECATED
	File *string `json:"file,omitempty"`
	// DEPRECATED
	FileUniqid *string `json:"file_uniqid,omitempty"`
}

// NewProductPlanRequest instantiates a new ProductPlanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductPlanRequest() *ProductPlanRequest {
	this := ProductPlanRequest{}
	return &this
}

// NewProductPlanRequestWithDefaults instantiates a new ProductPlanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductPlanRequestWithDefaults() *ProductPlanRequest {
	this := ProductPlanRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProductPlanRequest) SetTitle(v string) {
	o.Title = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ProductPlanRequest) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceDiscount returns the PriceDiscount field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetPriceDiscount() float32 {
	if o == nil || IsNil(o.PriceDiscount) {
		var ret float32
		return ret
	}
	return *o.PriceDiscount
}

// GetPriceDiscountOk returns a tuple with the PriceDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetPriceDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceDiscount) {
		return nil, false
	}
	return o.PriceDiscount, true
}

// HasPriceDiscount returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasPriceDiscount() bool {
	if o != nil && !IsNil(o.PriceDiscount) {
		return true
	}

	return false
}

// SetPriceDiscount gets a reference to the given float32 and assigns it to the PriceDiscount field.
func (o *ProductPlanRequest) SetPriceDiscount(v float32) {
	o.PriceDiscount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductPlanRequest) SetDescription(v string) {
	o.Description = &v
}

// GetTrialPeriod returns the TrialPeriod field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetTrialPeriod() string {
	if o == nil || IsNil(o.TrialPeriod) {
		var ret string
		return ret
	}
	return *o.TrialPeriod
}

// GetTrialPeriodOk returns a tuple with the TrialPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetTrialPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.TrialPeriod) {
		return nil, false
	}
	return o.TrialPeriod, true
}

// HasTrialPeriod returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasTrialPeriod() bool {
	if o != nil && !IsNil(o.TrialPeriod) {
		return true
	}

	return false
}

// SetTrialPeriod gets a reference to the given string and assigns it to the TrialPeriod field.
func (o *ProductPlanRequest) SetTrialPeriod(v string) {
	o.TrialPeriod = &v
}

// GetRecurringInterval returns the RecurringInterval field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetRecurringInterval() string {
	if o == nil || IsNil(o.RecurringInterval) {
		var ret string
		return ret
	}
	return *o.RecurringInterval
}

// GetRecurringIntervalOk returns a tuple with the RecurringInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetRecurringIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.RecurringInterval) {
		return nil, false
	}
	return o.RecurringInterval, true
}

// HasRecurringInterval returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasRecurringInterval() bool {
	if o != nil && !IsNil(o.RecurringInterval) {
		return true
	}

	return false
}

// SetRecurringInterval gets a reference to the given string and assigns it to the RecurringInterval field.
func (o *ProductPlanRequest) SetRecurringInterval(v string) {
	o.RecurringInterval = &v
}

// GetRecurringIntervalCount returns the RecurringIntervalCount field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetRecurringIntervalCount() string {
	if o == nil || IsNil(o.RecurringIntervalCount) {
		var ret string
		return ret
	}
	return *o.RecurringIntervalCount
}

// GetRecurringIntervalCountOk returns a tuple with the RecurringIntervalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetRecurringIntervalCountOk() (*string, bool) {
	if o == nil || IsNil(o.RecurringIntervalCount) {
		return nil, false
	}
	return o.RecurringIntervalCount, true
}

// HasRecurringIntervalCount returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasRecurringIntervalCount() bool {
	if o != nil && !IsNil(o.RecurringIntervalCount) {
		return true
	}

	return false
}

// SetRecurringIntervalCount gets a reference to the given string and assigns it to the RecurringIntervalCount field.
func (o *ProductPlanRequest) SetRecurringIntervalCount(v string) {
	o.RecurringIntervalCount = &v
}

// GetPaymentType returns the PaymentType field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetPaymentType() string {
	if o == nil || IsNil(o.PaymentType) {
		var ret string
		return ret
	}
	return *o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetPaymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentType) {
		return nil, false
	}
	return o.PaymentType, true
}

// HasPaymentType returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasPaymentType() bool {
	if o != nil && !IsNil(o.PaymentType) {
		return true
	}

	return false
}

// SetPaymentType gets a reference to the given string and assigns it to the PaymentType field.
func (o *ProductPlanRequest) SetPaymentType(v string) {
	o.PaymentType = &v
}

// GetRenewType returns the RenewType field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetRenewType() string {
	if o == nil || IsNil(o.RenewType) {
		var ret string
		return ret
	}
	return *o.RenewType
}

// GetRenewTypeOk returns a tuple with the RenewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetRenewTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RenewType) {
		return nil, false
	}
	return o.RenewType, true
}

// HasRenewType returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasRenewType() bool {
	if o != nil && !IsNil(o.RenewType) {
		return true
	}

	return false
}

// SetRenewType gets a reference to the given string and assigns it to the RenewType field.
func (o *ProductPlanRequest) SetRenewType(v string) {
	o.RenewType = &v
}

// GetBillingType returns the BillingType field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetBillingType() string {
	if o == nil || IsNil(o.BillingType) {
		var ret string
		return ret
	}
	return *o.BillingType
}

// GetBillingTypeOk returns a tuple with the BillingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetBillingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BillingType) {
		return nil, false
	}
	return o.BillingType, true
}

// HasBillingType returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasBillingType() bool {
	if o != nil && !IsNil(o.BillingType) {
		return true
	}

	return false
}

// SetBillingType gets a reference to the given string and assigns it to the BillingType field.
func (o *ProductPlanRequest) SetBillingType(v string) {
	o.BillingType = &v
}

// GetSerials returns the Serials field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetSerials() string {
	if o == nil || IsNil(o.Serials) {
		var ret string
		return ret
	}
	return *o.Serials
}

// GetSerialsOk returns a tuple with the Serials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetSerialsOk() (*string, bool) {
	if o == nil || IsNil(o.Serials) {
		return nil, false
	}
	return o.Serials, true
}

// HasSerials returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasSerials() bool {
	if o != nil && !IsNil(o.Serials) {
		return true
	}

	return false
}

// SetSerials gets a reference to the given string and assigns it to the Serials field.
func (o *ProductPlanRequest) SetSerials(v string) {
	o.Serials = &v
}

// GetServiceText returns the ServiceText field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetServiceText() string {
	if o == nil || IsNil(o.ServiceText) {
		var ret string
		return ret
	}
	return *o.ServiceText
}

// GetServiceTextOk returns a tuple with the ServiceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetServiceTextOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceText) {
		return nil, false
	}
	return o.ServiceText, true
}

// HasServiceText returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasServiceText() bool {
	if o != nil && !IsNil(o.ServiceText) {
		return true
	}

	return false
}

// SetServiceText gets a reference to the given string and assigns it to the ServiceText field.
func (o *ProductPlanRequest) SetServiceText(v string) {
	o.ServiceText = &v
}

// GetDynamicWebhook returns the DynamicWebhook field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetDynamicWebhook() string {
	if o == nil || IsNil(o.DynamicWebhook) {
		var ret string
		return ret
	}
	return *o.DynamicWebhook
}

// GetDynamicWebhookOk returns a tuple with the DynamicWebhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetDynamicWebhookOk() (*string, bool) {
	if o == nil || IsNil(o.DynamicWebhook) {
		return nil, false
	}
	return o.DynamicWebhook, true
}

// HasDynamicWebhook returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasDynamicWebhook() bool {
	if o != nil && !IsNil(o.DynamicWebhook) {
		return true
	}

	return false
}

// SetDynamicWebhook gets a reference to the given string and assigns it to the DynamicWebhook field.
func (o *ProductPlanRequest) SetDynamicWebhook(v string) {
	o.DynamicWebhook = &v
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetStock() string {
	if o == nil || IsNil(o.Stock) {
		var ret string
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetStockOk() (*string, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given string and assigns it to the Stock field.
func (o *ProductPlanRequest) SetStock(v string) {
	o.Stock = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *ProductPlanRequest) SetFile(v string) {
	o.File = &v
}

// GetFileUniqid returns the FileUniqid field value if set, zero value otherwise.
func (o *ProductPlanRequest) GetFileUniqid() string {
	if o == nil || IsNil(o.FileUniqid) {
		var ret string
		return ret
	}
	return *o.FileUniqid
}

// GetFileUniqidOk returns a tuple with the FileUniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanRequest) GetFileUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.FileUniqid) {
		return nil, false
	}
	return o.FileUniqid, true
}

// HasFileUniqid returns a boolean if a field has been set.
func (o *ProductPlanRequest) HasFileUniqid() bool {
	if o != nil && !IsNil(o.FileUniqid) {
		return true
	}

	return false
}

// SetFileUniqid gets a reference to the given string and assigns it to the FileUniqid field.
func (o *ProductPlanRequest) SetFileUniqid(v string) {
	o.FileUniqid = &v
}

func (o ProductPlanRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductPlanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceDiscount) {
		toSerialize["price_discount"] = o.PriceDiscount
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TrialPeriod) {
		toSerialize["trial_period"] = o.TrialPeriod
	}
	if !IsNil(o.RecurringInterval) {
		toSerialize["recurring_interval"] = o.RecurringInterval
	}
	if !IsNil(o.RecurringIntervalCount) {
		toSerialize["recurring_interval_count"] = o.RecurringIntervalCount
	}
	if !IsNil(o.PaymentType) {
		toSerialize["payment_type"] = o.PaymentType
	}
	if !IsNil(o.RenewType) {
		toSerialize["renew_type"] = o.RenewType
	}
	if !IsNil(o.BillingType) {
		toSerialize["billing_type"] = o.BillingType
	}
	if !IsNil(o.Serials) {
		toSerialize["serials"] = o.Serials
	}
	if !IsNil(o.ServiceText) {
		toSerialize["service_text"] = o.ServiceText
	}
	if !IsNil(o.DynamicWebhook) {
		toSerialize["dynamic_webhook"] = o.DynamicWebhook
	}
	if !IsNil(o.Stock) {
		toSerialize["stock"] = o.Stock
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.FileUniqid) {
		toSerialize["file_uniqid"] = o.FileUniqid
	}
	return toSerialize, nil
}

type NullableProductPlanRequest struct {
	value *ProductPlanRequest
	isSet bool
}

func (v NullableProductPlanRequest) Get() *ProductPlanRequest {
	return v.value
}

func (v *NullableProductPlanRequest) Set(val *ProductPlanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProductPlanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProductPlanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductPlanRequest(val *ProductPlanRequest) *NullableProductPlanRequest {
	return &NullableProductPlanRequest{value: val, isSet: true}
}

func (v NullableProductPlanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductPlanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


