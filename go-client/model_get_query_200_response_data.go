/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the GetQuery200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetQuery200ResponseData{}

// GetQuery200ResponseData struct for GetQuery200ResponseData
type GetQuery200ResponseData struct {
	Query *Query `json:"query,omitempty"`
}

// NewGetQuery200ResponseData instantiates a new GetQuery200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetQuery200ResponseData() *GetQuery200ResponseData {
	this := GetQuery200ResponseData{}
	return &this
}

// NewGetQuery200ResponseDataWithDefaults instantiates a new GetQuery200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetQuery200ResponseDataWithDefaults() *GetQuery200ResponseData {
	this := GetQuery200ResponseData{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *GetQuery200ResponseData) GetQuery() Query {
	if o == nil || IsNil(o.Query) {
		var ret Query
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetQuery200ResponseData) GetQueryOk() (*Query, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *GetQuery200ResponseData) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given Query and assigns it to the Query field.
func (o *GetQuery200ResponseData) SetQuery(v Query) {
	o.Query = &v
}

func (o GetQuery200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetQuery200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableGetQuery200ResponseData struct {
	value *GetQuery200ResponseData
	isSet bool
}

func (v NullableGetQuery200ResponseData) Get() *GetQuery200ResponseData {
	return v.value
}

func (v *NullableGetQuery200ResponseData) Set(val *GetQuery200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetQuery200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetQuery200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetQuery200ResponseData(val *GetQuery200ResponseData) *NullableGetQuery200ResponseData {
	return &NullableGetQuery200ResponseData{value: val, isSet: true}
}

func (v NullableGetQuery200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetQuery200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


