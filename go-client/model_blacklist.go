/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Blacklist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Blacklist{}

// Blacklist struct for Blacklist
type Blacklist struct {
	// ID of the resource
	Id *int32 `json:"id,omitempty"`
	// Unique ID of the resource, used as reference across the API.
	Uniqid *string `json:"uniqid,omitempty"`
	// Whether it is a PRIVATE or SHARED blacklist. SHARED blacklists are created by Sellix's Fraud Shield to be used across Business and Enterprise merchants.
	Scope *string `json:"scope,omitempty"`
	ScopeDetails map[string]interface{} `json:"scope_details,omitempty"`
	// The shop ID to which this blacklist belongs.
	ShopId *int32 `json:"shop_id,omitempty"`
	// The type of data of this blacklist.
	Type *string `json:"type,omitempty"`
	// The value of the blacklist.
	Data *string `json:"data,omitempty"`
	// Additional note provided on blacklist creation.
	Note *string `json:"note,omitempty"`
	// Timestamp for the creation of the blacklist.
	CreatedAt *int32 `json:"created_at,omitempty"`
	// Date, available if the blacklist has been edited.
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// User ID of the user who updated the blaclist.
	UpdatedBy *int32 `json:"updated_by,omitempty"`
}

// NewBlacklist instantiates a new Blacklist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlacklist() *Blacklist {
	this := Blacklist{}
	return &this
}

// NewBlacklistWithDefaults instantiates a new Blacklist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlacklistWithDefaults() *Blacklist {
	this := Blacklist{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Blacklist) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Blacklist) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Blacklist) SetId(v int32) {
	o.Id = &v
}

// GetUniqid returns the Uniqid field value if set, zero value otherwise.
func (o *Blacklist) GetUniqid() string {
	if o == nil || IsNil(o.Uniqid) {
		var ret string
		return ret
	}
	return *o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqid) {
		return nil, false
	}
	return o.Uniqid, true
}

// HasUniqid returns a boolean if a field has been set.
func (o *Blacklist) HasUniqid() bool {
	if o != nil && !IsNil(o.Uniqid) {
		return true
	}

	return false
}

// SetUniqid gets a reference to the given string and assigns it to the Uniqid field.
func (o *Blacklist) SetUniqid(v string) {
	o.Uniqid = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Blacklist) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Blacklist) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Blacklist) SetScope(v string) {
	o.Scope = &v
}

// GetScopeDetails returns the ScopeDetails field value if set, zero value otherwise.
func (o *Blacklist) GetScopeDetails() map[string]interface{} {
	if o == nil || IsNil(o.ScopeDetails) {
		var ret map[string]interface{}
		return ret
	}
	return o.ScopeDetails
}

// GetScopeDetailsOk returns a tuple with the ScopeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetScopeDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ScopeDetails) {
		return map[string]interface{}{}, false
	}
	return o.ScopeDetails, true
}

// HasScopeDetails returns a boolean if a field has been set.
func (o *Blacklist) HasScopeDetails() bool {
	if o != nil && !IsNil(o.ScopeDetails) {
		return true
	}

	return false
}

// SetScopeDetails gets a reference to the given map[string]interface{} and assigns it to the ScopeDetails field.
func (o *Blacklist) SetScopeDetails(v map[string]interface{}) {
	o.ScopeDetails = v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *Blacklist) GetShopId() int32 {
	if o == nil || IsNil(o.ShopId) {
		var ret int32
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetShopIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *Blacklist) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int32 and assigns it to the ShopId field.
func (o *Blacklist) SetShopId(v int32) {
	o.ShopId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Blacklist) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Blacklist) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Blacklist) SetType(v string) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Blacklist) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Blacklist) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *Blacklist) SetData(v string) {
	o.Data = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Blacklist) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Blacklist) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *Blacklist) SetNote(v string) {
	o.Note = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Blacklist) GetCreatedAt() int32 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetCreatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Blacklist) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *Blacklist) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Blacklist) GetUpdatedAt() int32 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Blacklist) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *Blacklist) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Blacklist) GetUpdatedBy() int32 {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blacklist) GetUpdatedByOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Blacklist) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *Blacklist) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

func (o Blacklist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Blacklist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uniqid) {
		toSerialize["uniqid"] = o.Uniqid
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.ScopeDetails) {
		toSerialize["scope_details"] = o.ScopeDetails
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	return toSerialize, nil
}

type NullableBlacklist struct {
	value *Blacklist
	isSet bool
}

func (v NullableBlacklist) Get() *Blacklist {
	return v.value
}

func (v *NullableBlacklist) Set(val *Blacklist) {
	v.value = val
	v.isSet = true
}

func (v NullableBlacklist) IsSet() bool {
	return v.isSet
}

func (v *NullableBlacklist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlacklist(val *Blacklist) *NullableBlacklist {
	return &NullableBlacklist{value: val, isSet: true}
}

func (v NullableBlacklist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlacklist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


