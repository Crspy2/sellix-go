/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Blockchain The blockchain of the crypto currency.
type Blockchain string

// List of blockchain
const (
	ERC20 Blockchain = "ERC20"
	BEP20 Blockchain = "BEP20"
	TRC20 Blockchain = "TRC20"
	MATIC Blockchain = "MATIC"
	SOL Blockchain = "SOL"
)

// All allowed values of Blockchain enum
var AllowedBlockchainEnumValues = []Blockchain{
	"ERC20",
	"BEP20",
	"TRC20",
	"MATIC",
	"SOL",
}

func (v *Blockchain) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Blockchain(value)
	for _, existing := range AllowedBlockchainEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Blockchain", value)
}

// NewBlockchainFromValue returns a pointer to a valid Blockchain
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockchainFromValue(v string) (*Blockchain, error) {
	ev := Blockchain(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Blockchain: valid values are %v", v, AllowedBlockchainEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Blockchain) IsValid() bool {
	for _, existing := range AllowedBlockchainEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockchain value
func (v Blockchain) Ptr() *Blockchain {
	return &v
}

type NullableBlockchain struct {
	value *Blockchain
	isSet bool
}

func (v NullableBlockchain) Get() *Blockchain {
	return v.value
}

func (v *NullableBlockchain) Set(val *Blockchain) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchain) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchain(val *Blockchain) *NullableBlockchain {
	return &NullableBlockchain{value: val, isSet: true}
}

func (v NullableBlockchain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

