/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the ProductPlanPriceConversions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductPlanPriceConversions{}

// ProductPlanPriceConversions Price conversions for supported currencies
type ProductPlanPriceConversions struct {
	USD *float32 `json:"USD,omitempty"`
	CAD *float32 `json:"CAD,omitempty"`
	Crypto *ProductPlanPriceConversionsCrypto `json:"crypto,omitempty"`
}

// NewProductPlanPriceConversions instantiates a new ProductPlanPriceConversions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductPlanPriceConversions() *ProductPlanPriceConversions {
	this := ProductPlanPriceConversions{}
	return &this
}

// NewProductPlanPriceConversionsWithDefaults instantiates a new ProductPlanPriceConversions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductPlanPriceConversionsWithDefaults() *ProductPlanPriceConversions {
	this := ProductPlanPriceConversions{}
	return &this
}

// GetUSD returns the USD field value if set, zero value otherwise.
func (o *ProductPlanPriceConversions) GetUSD() float32 {
	if o == nil || IsNil(o.USD) {
		var ret float32
		return ret
	}
	return *o.USD
}

// GetUSDOk returns a tuple with the USD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanPriceConversions) GetUSDOk() (*float32, bool) {
	if o == nil || IsNil(o.USD) {
		return nil, false
	}
	return o.USD, true
}

// HasUSD returns a boolean if a field has been set.
func (o *ProductPlanPriceConversions) HasUSD() bool {
	if o != nil && !IsNil(o.USD) {
		return true
	}

	return false
}

// SetUSD gets a reference to the given float32 and assigns it to the USD field.
func (o *ProductPlanPriceConversions) SetUSD(v float32) {
	o.USD = &v
}

// GetCAD returns the CAD field value if set, zero value otherwise.
func (o *ProductPlanPriceConversions) GetCAD() float32 {
	if o == nil || IsNil(o.CAD) {
		var ret float32
		return ret
	}
	return *o.CAD
}

// GetCADOk returns a tuple with the CAD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanPriceConversions) GetCADOk() (*float32, bool) {
	if o == nil || IsNil(o.CAD) {
		return nil, false
	}
	return o.CAD, true
}

// HasCAD returns a boolean if a field has been set.
func (o *ProductPlanPriceConversions) HasCAD() bool {
	if o != nil && !IsNil(o.CAD) {
		return true
	}

	return false
}

// SetCAD gets a reference to the given float32 and assigns it to the CAD field.
func (o *ProductPlanPriceConversions) SetCAD(v float32) {
	o.CAD = &v
}

// GetCrypto returns the Crypto field value if set, zero value otherwise.
func (o *ProductPlanPriceConversions) GetCrypto() ProductPlanPriceConversionsCrypto {
	if o == nil || IsNil(o.Crypto) {
		var ret ProductPlanPriceConversionsCrypto
		return ret
	}
	return *o.Crypto
}

// GetCryptoOk returns a tuple with the Crypto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanPriceConversions) GetCryptoOk() (*ProductPlanPriceConversionsCrypto, bool) {
	if o == nil || IsNil(o.Crypto) {
		return nil, false
	}
	return o.Crypto, true
}

// HasCrypto returns a boolean if a field has been set.
func (o *ProductPlanPriceConversions) HasCrypto() bool {
	if o != nil && !IsNil(o.Crypto) {
		return true
	}

	return false
}

// SetCrypto gets a reference to the given ProductPlanPriceConversionsCrypto and assigns it to the Crypto field.
func (o *ProductPlanPriceConversions) SetCrypto(v ProductPlanPriceConversionsCrypto) {
	o.Crypto = &v
}

func (o ProductPlanPriceConversions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductPlanPriceConversions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.USD) {
		toSerialize["USD"] = o.USD
	}
	if !IsNil(o.CAD) {
		toSerialize["CAD"] = o.CAD
	}
	if !IsNil(o.Crypto) {
		toSerialize["crypto"] = o.Crypto
	}
	return toSerialize, nil
}

type NullableProductPlanPriceConversions struct {
	value *ProductPlanPriceConversions
	isSet bool
}

func (v NullableProductPlanPriceConversions) Get() *ProductPlanPriceConversions {
	return v.value
}

func (v *NullableProductPlanPriceConversions) Set(val *ProductPlanPriceConversions) {
	v.value = val
	v.isSet = true
}

func (v NullableProductPlanPriceConversions) IsSet() bool {
	return v.isSet
}

func (v *NullableProductPlanPriceConversions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductPlanPriceConversions(val *ProductPlanPriceConversions) *NullableProductPlanPriceConversions {
	return &NullableProductPlanPriceConversions{value: val, isSet: true}
}

func (v NullableProductPlanPriceConversions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductPlanPriceConversions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


