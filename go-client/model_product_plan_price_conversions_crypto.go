/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProductPlanPriceConversionsCrypto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductPlanPriceConversionsCrypto{}

// ProductPlanPriceConversionsCrypto struct for ProductPlanPriceConversionsCrypto
type ProductPlanPriceConversionsCrypto struct {
	BTC *string `json:"BTC,omitempty"`
	DOGE *string `json:"DOGE,omitempty"`
}

// NewProductPlanPriceConversionsCrypto instantiates a new ProductPlanPriceConversionsCrypto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductPlanPriceConversionsCrypto() *ProductPlanPriceConversionsCrypto {
	this := ProductPlanPriceConversionsCrypto{}
	return &this
}

// NewProductPlanPriceConversionsCryptoWithDefaults instantiates a new ProductPlanPriceConversionsCrypto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductPlanPriceConversionsCryptoWithDefaults() *ProductPlanPriceConversionsCrypto {
	this := ProductPlanPriceConversionsCrypto{}
	return &this
}

// GetBTC returns the BTC field value if set, zero value otherwise.
func (o *ProductPlanPriceConversionsCrypto) GetBTC() string {
	if o == nil || IsNil(o.BTC) {
		var ret string
		return ret
	}
	return *o.BTC
}

// GetBTCOk returns a tuple with the BTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanPriceConversionsCrypto) GetBTCOk() (*string, bool) {
	if o == nil || IsNil(o.BTC) {
		return nil, false
	}
	return o.BTC, true
}

// HasBTC returns a boolean if a field has been set.
func (o *ProductPlanPriceConversionsCrypto) HasBTC() bool {
	if o != nil && !IsNil(o.BTC) {
		return true
	}

	return false
}

// SetBTC gets a reference to the given string and assigns it to the BTC field.
func (o *ProductPlanPriceConversionsCrypto) SetBTC(v string) {
	o.BTC = &v
}

// GetDOGE returns the DOGE field value if set, zero value otherwise.
func (o *ProductPlanPriceConversionsCrypto) GetDOGE() string {
	if o == nil || IsNil(o.DOGE) {
		var ret string
		return ret
	}
	return *o.DOGE
}

// GetDOGEOk returns a tuple with the DOGE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanPriceConversionsCrypto) GetDOGEOk() (*string, bool) {
	if o == nil || IsNil(o.DOGE) {
		return nil, false
	}
	return o.DOGE, true
}

// HasDOGE returns a boolean if a field has been set.
func (o *ProductPlanPriceConversionsCrypto) HasDOGE() bool {
	if o != nil && !IsNil(o.DOGE) {
		return true
	}

	return false
}

// SetDOGE gets a reference to the given string and assigns it to the DOGE field.
func (o *ProductPlanPriceConversionsCrypto) SetDOGE(v string) {
	o.DOGE = &v
}

func (o ProductPlanPriceConversionsCrypto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductPlanPriceConversionsCrypto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BTC) {
		toSerialize["BTC"] = o.BTC
	}
	if !IsNil(o.DOGE) {
		toSerialize["DOGE"] = o.DOGE
	}
	return toSerialize, nil
}

type NullableProductPlanPriceConversionsCrypto struct {
	value *ProductPlanPriceConversionsCrypto
	isSet bool
}

func (v NullableProductPlanPriceConversionsCrypto) Get() *ProductPlanPriceConversionsCrypto {
	return v.value
}

func (v *NullableProductPlanPriceConversionsCrypto) Set(val *ProductPlanPriceConversionsCrypto) {
	v.value = val
	v.isSet = true
}

func (v NullableProductPlanPriceConversionsCrypto) IsSet() bool {
	return v.isSet
}

func (v *NullableProductPlanPriceConversionsCrypto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductPlanPriceConversionsCrypto(val *ProductPlanPriceConversionsCrypto) *NullableProductPlanPriceConversionsCrypto {
	return &NullableProductPlanPriceConversionsCrypto{value: val, isSet: true}
}

func (v NullableProductPlanPriceConversionsCrypto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductPlanPriceConversionsCrypto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


