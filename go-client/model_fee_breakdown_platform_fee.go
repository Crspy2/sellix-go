/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the FeeBreakdownPlatformFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeBreakdownPlatformFee{}

// FeeBreakdownPlatformFee struct for FeeBreakdownPlatformFee
type FeeBreakdownPlatformFee struct {
	// The amount of the service fee.
	Amount *float32 `json:"amount,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	Breakdown *FeeBreakdownPlatformFeeBreakdown `json:"breakdown,omitempty"`
}

// NewFeeBreakdownPlatformFee instantiates a new FeeBreakdownPlatformFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeBreakdownPlatformFee() *FeeBreakdownPlatformFee {
	this := FeeBreakdownPlatformFee{}
	return &this
}

// NewFeeBreakdownPlatformFeeWithDefaults instantiates a new FeeBreakdownPlatformFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeBreakdownPlatformFeeWithDefaults() *FeeBreakdownPlatformFee {
	this := FeeBreakdownPlatformFee{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *FeeBreakdownPlatformFee) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeBreakdownPlatformFee) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *FeeBreakdownPlatformFee) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *FeeBreakdownPlatformFee) SetAmount(v float32) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *FeeBreakdownPlatformFee) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeBreakdownPlatformFee) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *FeeBreakdownPlatformFee) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *FeeBreakdownPlatformFee) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetBreakdown returns the Breakdown field value if set, zero value otherwise.
func (o *FeeBreakdownPlatformFee) GetBreakdown() FeeBreakdownPlatformFeeBreakdown {
	if o == nil || IsNil(o.Breakdown) {
		var ret FeeBreakdownPlatformFeeBreakdown
		return ret
	}
	return *o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeBreakdownPlatformFee) GetBreakdownOk() (*FeeBreakdownPlatformFeeBreakdown, bool) {
	if o == nil || IsNil(o.Breakdown) {
		return nil, false
	}
	return o.Breakdown, true
}

// HasBreakdown returns a boolean if a field has been set.
func (o *FeeBreakdownPlatformFee) HasBreakdown() bool {
	if o != nil && !IsNil(o.Breakdown) {
		return true
	}

	return false
}

// SetBreakdown gets a reference to the given FeeBreakdownPlatformFeeBreakdown and assigns it to the Breakdown field.
func (o *FeeBreakdownPlatformFee) SetBreakdown(v FeeBreakdownPlatformFeeBreakdown) {
	o.Breakdown = &v
}

func (o FeeBreakdownPlatformFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeBreakdownPlatformFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Breakdown) {
		toSerialize["breakdown"] = o.Breakdown
	}
	return toSerialize, nil
}

type NullableFeeBreakdownPlatformFee struct {
	value *FeeBreakdownPlatformFee
	isSet bool
}

func (v NullableFeeBreakdownPlatformFee) Get() *FeeBreakdownPlatformFee {
	return v.value
}

func (v *NullableFeeBreakdownPlatformFee) Set(val *FeeBreakdownPlatformFee) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeBreakdownPlatformFee) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeBreakdownPlatformFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeBreakdownPlatformFee(val *FeeBreakdownPlatformFee) *NullableFeeBreakdownPlatformFee {
	return &NullableFeeBreakdownPlatformFee{value: val, isSet: true}
}

func (v NullableFeeBreakdownPlatformFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeBreakdownPlatformFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


