/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BlacklistsAPIService BlacklistsAPI service
type BlacklistsAPIService service

type ApiCreateBlacklistRequest struct {
	ctx context.Context
	ApiService *BlacklistsAPIService
	createBlacklistRequest *CreateBlacklistRequest
	xSellixMerchant *string
}

// blacklist JSON to be created
func (r ApiCreateBlacklistRequest) CreateBlacklistRequest(createBlacklistRequest CreateBlacklistRequest) ApiCreateBlacklistRequest {
	r.createBlacklistRequest = &createBlacklistRequest
	return r
}

// The name of the store to perform actions on via the API
func (r ApiCreateBlacklistRequest) XSellixMerchant(xSellixMerchant string) ApiCreateBlacklistRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiCreateBlacklistRequest) Execute() (*CreateBlacklist200Response, *http.Response, error) {
	return r.ApiService.CreateBlacklistExecute(r)
}

/*
CreateBlacklist Method for CreateBlacklist

Create a blacklist

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateBlacklistRequest
*/
func (a *BlacklistsAPIService) CreateBlacklist(ctx context.Context) ApiCreateBlacklistRequest {
	return ApiCreateBlacklistRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateBlacklist200Response
func (a *BlacklistsAPIService) CreateBlacklistExecute(r ApiCreateBlacklistRequest) (*CreateBlacklist200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateBlacklist200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlacklistsAPIService.CreateBlacklist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blacklists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createBlacklistRequest == nil {
		return localVarReturnValue, nil, reportError("createBlacklistRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	// body params
	localVarPostBody = r.createBlacklistRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CreateBlacklist400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBlacklistRequest struct {
	ctx context.Context
	ApiService *BlacklistsAPIService
	uniqid string
	xSellixMerchant *string
}

// The name of the store to perform actions on via the API
func (r ApiDeleteBlacklistRequest) XSellixMerchant(xSellixMerchant string) ApiDeleteBlacklistRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiDeleteBlacklistRequest) Execute() (*DeleteBlacklist200Response, *http.Response, error) {
	return r.ApiService.DeleteBlacklistExecute(r)
}

/*
DeleteBlacklist Method for DeleteBlacklist

Delete a blacklist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uniqid Uniqid of the resource
 @return ApiDeleteBlacklistRequest
*/
func (a *BlacklistsAPIService) DeleteBlacklist(ctx context.Context, uniqid string) ApiDeleteBlacklistRequest {
	return ApiDeleteBlacklistRequest{
		ApiService: a,
		ctx: ctx,
		uniqid: uniqid,
	}
}

// Execute executes the request
//  @return DeleteBlacklist200Response
func (a *BlacklistsAPIService) DeleteBlacklistExecute(r ApiDeleteBlacklistRequest) (*DeleteBlacklist200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteBlacklist200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlacklistsAPIService.DeleteBlacklist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blacklists/{uniqid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uniqid"+"}", url.PathEscape(parameterValueToString(r.uniqid, "uniqid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlacklistRequest struct {
	ctx context.Context
	ApiService *BlacklistsAPIService
	uniqid string
	xSellixMerchant *string
}

// The name of the store to perform actions on via the API
func (r ApiGetBlacklistRequest) XSellixMerchant(xSellixMerchant string) ApiGetBlacklistRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiGetBlacklistRequest) Execute() (*GetBlacklist200Response, *http.Response, error) {
	return r.ApiService.GetBlacklistExecute(r)
}

/*
GetBlacklist Method for GetBlacklist

Get a specific blacklist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uniqid Uniqid of the resource
 @return ApiGetBlacklistRequest
*/
func (a *BlacklistsAPIService) GetBlacklist(ctx context.Context, uniqid string) ApiGetBlacklistRequest {
	return ApiGetBlacklistRequest{
		ApiService: a,
		ctx: ctx,
		uniqid: uniqid,
	}
}

// Execute executes the request
//  @return GetBlacklist200Response
func (a *BlacklistsAPIService) GetBlacklistExecute(r ApiGetBlacklistRequest) (*GetBlacklist200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBlacklist200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlacklistsAPIService.GetBlacklist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blacklists/{uniqid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uniqid"+"}", url.PathEscape(parameterValueToString(r.uniqid, "uniqid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetBlacklist404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBlacklistsRequest struct {
	ctx context.Context
	ApiService *BlacklistsAPIService
	xSellixMerchant *string
	page *int32
}

// The name of the store to perform actions on via the API
func (r ApiListBlacklistsRequest) XSellixMerchant(xSellixMerchant string) ApiListBlacklistsRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

// If pagination is desired, the page to fetch of the response
func (r ApiListBlacklistsRequest) Page(page int32) ApiListBlacklistsRequest {
	r.page = &page
	return r
}

func (r ApiListBlacklistsRequest) Execute() (*ListBlacklists200Response, *http.Response, error) {
	return r.ApiService.ListBlacklistsExecute(r)
}

/*
ListBlacklists Method for ListBlacklists

List all the blacklists created on the current shop.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListBlacklistsRequest
*/
func (a *BlacklistsAPIService) ListBlacklists(ctx context.Context) ApiListBlacklistsRequest {
	return ApiListBlacklistsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListBlacklists200Response
func (a *BlacklistsAPIService) ListBlacklistsExecute(r ApiListBlacklistsRequest) (*ListBlacklists200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListBlacklists200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlacklistsAPIService.ListBlacklists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blacklists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBlacklistRequest struct {
	ctx context.Context
	ApiService *BlacklistsAPIService
	uniqid string
	updateBlacklistRequest *UpdateBlacklistRequest
	xSellixMerchant *string
}

// blacklist JSON to be updated
func (r ApiUpdateBlacklistRequest) UpdateBlacklistRequest(updateBlacklistRequest UpdateBlacklistRequest) ApiUpdateBlacklistRequest {
	r.updateBlacklistRequest = &updateBlacklistRequest
	return r
}

// The name of the store to perform actions on via the API
func (r ApiUpdateBlacklistRequest) XSellixMerchant(xSellixMerchant string) ApiUpdateBlacklistRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiUpdateBlacklistRequest) Execute() (*UpdateBlacklist200Response, *http.Response, error) {
	return r.ApiService.UpdateBlacklistExecute(r)
}

/*
UpdateBlacklist Method for UpdateBlacklist

Update a blacklist

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uniqid Uniqid of the resource
 @return ApiUpdateBlacklistRequest
*/
func (a *BlacklistsAPIService) UpdateBlacklist(ctx context.Context, uniqid string) ApiUpdateBlacklistRequest {
	return ApiUpdateBlacklistRequest{
		ApiService: a,
		ctx: ctx,
		uniqid: uniqid,
	}
}

// Execute executes the request
//  @return UpdateBlacklist200Response
func (a *BlacklistsAPIService) UpdateBlacklistExecute(r ApiUpdateBlacklistRequest) (*UpdateBlacklist200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateBlacklist200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlacklistsAPIService.UpdateBlacklist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blacklists/{uniqid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uniqid"+"}", url.PathEscape(parameterValueToString(r.uniqid, "uniqid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateBlacklistRequest == nil {
		return localVarReturnValue, nil, reportError("updateBlacklistRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	// body params
	localVarPostBody = r.updateBlacklistRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CreateBlacklist400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
