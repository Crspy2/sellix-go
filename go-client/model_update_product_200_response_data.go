/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateProduct200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProduct200ResponseData{}

// UpdateProduct200ResponseData struct for UpdateProduct200ResponseData
type UpdateProduct200ResponseData struct {
	// The ID of the product
	Uniqid *string `json:"uniqid,omitempty"`
}

// NewUpdateProduct200ResponseData instantiates a new UpdateProduct200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProduct200ResponseData() *UpdateProduct200ResponseData {
	this := UpdateProduct200ResponseData{}
	return &this
}

// NewUpdateProduct200ResponseDataWithDefaults instantiates a new UpdateProduct200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProduct200ResponseDataWithDefaults() *UpdateProduct200ResponseData {
	this := UpdateProduct200ResponseData{}
	return &this
}

// GetUniqid returns the Uniqid field value if set, zero value otherwise.
func (o *UpdateProduct200ResponseData) GetUniqid() string {
	if o == nil || IsNil(o.Uniqid) {
		var ret string
		return ret
	}
	return *o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProduct200ResponseData) GetUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqid) {
		return nil, false
	}
	return o.Uniqid, true
}

// HasUniqid returns a boolean if a field has been set.
func (o *UpdateProduct200ResponseData) HasUniqid() bool {
	if o != nil && !IsNil(o.Uniqid) {
		return true
	}

	return false
}

// SetUniqid gets a reference to the given string and assigns it to the Uniqid field.
func (o *UpdateProduct200ResponseData) SetUniqid(v string) {
	o.Uniqid = &v
}

func (o UpdateProduct200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProduct200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uniqid) {
		toSerialize["uniqid"] = o.Uniqid
	}
	return toSerialize, nil
}

type NullableUpdateProduct200ResponseData struct {
	value *UpdateProduct200ResponseData
	isSet bool
}

func (v NullableUpdateProduct200ResponseData) Get() *UpdateProduct200ResponseData {
	return v.value
}

func (v *NullableUpdateProduct200ResponseData) Set(val *UpdateProduct200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProduct200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProduct200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProduct200ResponseData(val *UpdateProduct200ResponseData) *NullableUpdateProduct200ResponseData {
	return &NullableUpdateProduct200ResponseData{value: val, isSet: true}
}

func (v NullableUpdateProduct200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProduct200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


