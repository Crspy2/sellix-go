/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CouponsAPIService CouponsAPI service
type CouponsAPIService service

type ApiCreateCouponRequest struct {
	ctx context.Context
	ApiService *CouponsAPIService
	createCouponRequest *CreateCouponRequest
	xSellixMerchant *string
}

// coupon JSON to be created
func (r ApiCreateCouponRequest) CreateCouponRequest(createCouponRequest CreateCouponRequest) ApiCreateCouponRequest {
	r.createCouponRequest = &createCouponRequest
	return r
}

// The name of the store to perform actions on via the API
func (r ApiCreateCouponRequest) XSellixMerchant(xSellixMerchant string) ApiCreateCouponRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiCreateCouponRequest) Execute() (*CreateCoupon200Response, *http.Response, error) {
	return r.ApiService.CreateCouponExecute(r)
}

/*
CreateCoupon Method for CreateCoupon

Create a coupon

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCouponRequest
*/
func (a *CouponsAPIService) CreateCoupon(ctx context.Context) ApiCreateCouponRequest {
	return ApiCreateCouponRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateCoupon200Response
func (a *CouponsAPIService) CreateCouponExecute(r ApiCreateCouponRequest) (*CreateCoupon200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateCoupon200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponsAPIService.CreateCoupon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createCouponRequest == nil {
		return localVarReturnValue, nil, reportError("createCouponRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	// body params
	localVarPostBody = r.createCouponRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CreateBlacklist400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCouponRequest struct {
	ctx context.Context
	ApiService *CouponsAPIService
	uniqid string
	xSellixMerchant *string
}

// The name of the store to perform actions on via the API
func (r ApiDeleteCouponRequest) XSellixMerchant(xSellixMerchant string) ApiDeleteCouponRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiDeleteCouponRequest) Execute() (*DeleteCoupon200Response, *http.Response, error) {
	return r.ApiService.DeleteCouponExecute(r)
}

/*
DeleteCoupon Method for DeleteCoupon

Delete a coupon.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uniqid Uniqid of the resource
 @return ApiDeleteCouponRequest
*/
func (a *CouponsAPIService) DeleteCoupon(ctx context.Context, uniqid string) ApiDeleteCouponRequest {
	return ApiDeleteCouponRequest{
		ApiService: a,
		ctx: ctx,
		uniqid: uniqid,
	}
}

// Execute executes the request
//  @return DeleteCoupon200Response
func (a *CouponsAPIService) DeleteCouponExecute(r ApiDeleteCouponRequest) (*DeleteCoupon200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteCoupon200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponsAPIService.DeleteCoupon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupons/{uniqid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uniqid"+"}", url.PathEscape(parameterValueToString(r.uniqid, "uniqid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCouponRequest struct {
	ctx context.Context
	ApiService *CouponsAPIService
	uniqid string
	xSellixMerchant *string
}

// The name of the store to perform actions on via the API
func (r ApiGetCouponRequest) XSellixMerchant(xSellixMerchant string) ApiGetCouponRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiGetCouponRequest) Execute() (*GetCoupon200Response, *http.Response, error) {
	return r.ApiService.GetCouponExecute(r)
}

/*
GetCoupon Method for GetCoupon

Get a specific coupon.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uniqid Uniqid of the resource
 @return ApiGetCouponRequest
*/
func (a *CouponsAPIService) GetCoupon(ctx context.Context, uniqid string) ApiGetCouponRequest {
	return ApiGetCouponRequest{
		ApiService: a,
		ctx: ctx,
		uniqid: uniqid,
	}
}

// Execute executes the request
//  @return GetCoupon200Response
func (a *CouponsAPIService) GetCouponExecute(r ApiGetCouponRequest) (*GetCoupon200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCoupon200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponsAPIService.GetCoupon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupons/{uniqid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uniqid"+"}", url.PathEscape(parameterValueToString(r.uniqid, "uniqid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetBlacklist404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCouponsRequest struct {
	ctx context.Context
	ApiService *CouponsAPIService
	xSellixMerchant *string
	page *int32
}

// The name of the store to perform actions on via the API
func (r ApiListCouponsRequest) XSellixMerchant(xSellixMerchant string) ApiListCouponsRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

// If pagination is desired, the page to fetch of the response
func (r ApiListCouponsRequest) Page(page int32) ApiListCouponsRequest {
	r.page = &page
	return r
}

func (r ApiListCouponsRequest) Execute() (*ListCoupons200Response, *http.Response, error) {
	return r.ApiService.ListCouponsExecute(r)
}

/*
ListCoupons Method for ListCoupons

List all the coupons created on the current shop.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCouponsRequest
*/
func (a *CouponsAPIService) ListCoupons(ctx context.Context) ApiListCouponsRequest {
	return ApiListCouponsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListCoupons200Response
func (a *CouponsAPIService) ListCouponsExecute(r ApiListCouponsRequest) (*ListCoupons200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListCoupons200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponsAPIService.ListCoupons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCouponRequest struct {
	ctx context.Context
	ApiService *CouponsAPIService
	uniqid string
	updateCouponRequest *UpdateCouponRequest
	xSellixMerchant *string
}

// coupon JSON to be updated
func (r ApiUpdateCouponRequest) UpdateCouponRequest(updateCouponRequest UpdateCouponRequest) ApiUpdateCouponRequest {
	r.updateCouponRequest = &updateCouponRequest
	return r
}

// The name of the store to perform actions on via the API
func (r ApiUpdateCouponRequest) XSellixMerchant(xSellixMerchant string) ApiUpdateCouponRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiUpdateCouponRequest) Execute() (*UpdateCoupon200Response, *http.Response, error) {
	return r.ApiService.UpdateCouponExecute(r)
}

/*
UpdateCoupon Method for UpdateCoupon

Update a coupon

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uniqid Uniqid of the resource
 @return ApiUpdateCouponRequest
*/
func (a *CouponsAPIService) UpdateCoupon(ctx context.Context, uniqid string) ApiUpdateCouponRequest {
	return ApiUpdateCouponRequest{
		ApiService: a,
		ctx: ctx,
		uniqid: uniqid,
	}
}

// Execute executes the request
//  @return UpdateCoupon200Response
func (a *CouponsAPIService) UpdateCouponExecute(r ApiUpdateCouponRequest) (*UpdateCoupon200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateCoupon200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponsAPIService.UpdateCoupon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupons/{uniqid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uniqid"+"}", url.PathEscape(parameterValueToString(r.uniqid, "uniqid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateCouponRequest == nil {
		return localVarReturnValue, nil, reportError("updateCouponRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	// body params
	localVarPostBody = r.updateCouponRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CreateBlacklist400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
