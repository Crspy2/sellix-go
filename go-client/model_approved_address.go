/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the ApprovedAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovedAddress{}

// ApprovedAddress struct for ApprovedAddress
type ApprovedAddress struct {
	// ID of the resource.
	Id *int32 `json:"id,omitempty"`
	// The crypto address that was approved.
	Address *string `json:"address,omitempty"`
	// The coin of the approved address.
	Coin *string `json:"coin,omitempty"`
	Blockchain *Blockchain `json:"blockchain,omitempty"`
	// The transaction ID of the approval.
	Tx *string `json:"tx,omitempty"`
	// The recurring billing ID of the approval.
	RecurringBillingId *string `json:"recurring_billing_id,omitempty"`
	// The allowance of the approved address.
	Allowance *float32 `json:"allowance,omitempty"`
	// Timestamp, available if the approved address has been updated.
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// Timestamp, available if the approved address has been created.
	CreatedAt *int32 `json:"created_at,omitempty"`
}

// NewApprovedAddress instantiates a new ApprovedAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovedAddress() *ApprovedAddress {
	this := ApprovedAddress{}
	return &this
}

// NewApprovedAddressWithDefaults instantiates a new ApprovedAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovedAddressWithDefaults() *ApprovedAddress {
	this := ApprovedAddress{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApprovedAddress) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApprovedAddress) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ApprovedAddress) SetId(v int32) {
	o.Id = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ApprovedAddress) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ApprovedAddress) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ApprovedAddress) SetAddress(v string) {
	o.Address = &v
}

// GetCoin returns the Coin field value if set, zero value otherwise.
func (o *ApprovedAddress) GetCoin() string {
	if o == nil || IsNil(o.Coin) {
		var ret string
		return ret
	}
	return *o.Coin
}

// GetCoinOk returns a tuple with the Coin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetCoinOk() (*string, bool) {
	if o == nil || IsNil(o.Coin) {
		return nil, false
	}
	return o.Coin, true
}

// HasCoin returns a boolean if a field has been set.
func (o *ApprovedAddress) HasCoin() bool {
	if o != nil && !IsNil(o.Coin) {
		return true
	}

	return false
}

// SetCoin gets a reference to the given string and assigns it to the Coin field.
func (o *ApprovedAddress) SetCoin(v string) {
	o.Coin = &v
}

// GetBlockchain returns the Blockchain field value if set, zero value otherwise.
func (o *ApprovedAddress) GetBlockchain() Blockchain {
	if o == nil || IsNil(o.Blockchain) {
		var ret Blockchain
		return ret
	}
	return *o.Blockchain
}

// GetBlockchainOk returns a tuple with the Blockchain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetBlockchainOk() (*Blockchain, bool) {
	if o == nil || IsNil(o.Blockchain) {
		return nil, false
	}
	return o.Blockchain, true
}

// HasBlockchain returns a boolean if a field has been set.
func (o *ApprovedAddress) HasBlockchain() bool {
	if o != nil && !IsNil(o.Blockchain) {
		return true
	}

	return false
}

// SetBlockchain gets a reference to the given Blockchain and assigns it to the Blockchain field.
func (o *ApprovedAddress) SetBlockchain(v Blockchain) {
	o.Blockchain = &v
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *ApprovedAddress) GetTx() string {
	if o == nil || IsNil(o.Tx) {
		var ret string
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetTxOk() (*string, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *ApprovedAddress) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given string and assigns it to the Tx field.
func (o *ApprovedAddress) SetTx(v string) {
	o.Tx = &v
}

// GetRecurringBillingId returns the RecurringBillingId field value if set, zero value otherwise.
func (o *ApprovedAddress) GetRecurringBillingId() string {
	if o == nil || IsNil(o.RecurringBillingId) {
		var ret string
		return ret
	}
	return *o.RecurringBillingId
}

// GetRecurringBillingIdOk returns a tuple with the RecurringBillingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetRecurringBillingIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecurringBillingId) {
		return nil, false
	}
	return o.RecurringBillingId, true
}

// HasRecurringBillingId returns a boolean if a field has been set.
func (o *ApprovedAddress) HasRecurringBillingId() bool {
	if o != nil && !IsNil(o.RecurringBillingId) {
		return true
	}

	return false
}

// SetRecurringBillingId gets a reference to the given string and assigns it to the RecurringBillingId field.
func (o *ApprovedAddress) SetRecurringBillingId(v string) {
	o.RecurringBillingId = &v
}

// GetAllowance returns the Allowance field value if set, zero value otherwise.
func (o *ApprovedAddress) GetAllowance() float32 {
	if o == nil || IsNil(o.Allowance) {
		var ret float32
		return ret
	}
	return *o.Allowance
}

// GetAllowanceOk returns a tuple with the Allowance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetAllowanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Allowance) {
		return nil, false
	}
	return o.Allowance, true
}

// HasAllowance returns a boolean if a field has been set.
func (o *ApprovedAddress) HasAllowance() bool {
	if o != nil && !IsNil(o.Allowance) {
		return true
	}

	return false
}

// SetAllowance gets a reference to the given float32 and assigns it to the Allowance field.
func (o *ApprovedAddress) SetAllowance(v float32) {
	o.Allowance = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ApprovedAddress) GetUpdatedAt() int32 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ApprovedAddress) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *ApprovedAddress) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ApprovedAddress) GetCreatedAt() int32 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovedAddress) GetCreatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ApprovedAddress) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *ApprovedAddress) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

func (o ApprovedAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovedAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Coin) {
		toSerialize["coin"] = o.Coin
	}
	if !IsNil(o.Blockchain) {
		toSerialize["blockchain"] = o.Blockchain
	}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	if !IsNil(o.RecurringBillingId) {
		toSerialize["recurring_billing_id"] = o.RecurringBillingId
	}
	if !IsNil(o.Allowance) {
		toSerialize["allowance"] = o.Allowance
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableApprovedAddress struct {
	value *ApprovedAddress
	isSet bool
}

func (v NullableApprovedAddress) Get() *ApprovedAddress {
	return v.value
}

func (v *NullableApprovedAddress) Set(val *ApprovedAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovedAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovedAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovedAddress(val *ApprovedAddress) *NullableApprovedAddress {
	return &NullableApprovedAddress{value: val, isSet: true}
}

func (v NullableApprovedAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovedAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


