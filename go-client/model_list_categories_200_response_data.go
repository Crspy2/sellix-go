/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListCategories200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListCategories200ResponseData{}

// ListCategories200ResponseData struct for ListCategories200ResponseData
type ListCategories200ResponseData struct {
	Categories []Category `json:"categories,omitempty"`
}

// NewListCategories200ResponseData instantiates a new ListCategories200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCategories200ResponseData() *ListCategories200ResponseData {
	this := ListCategories200ResponseData{}
	return &this
}

// NewListCategories200ResponseDataWithDefaults instantiates a new ListCategories200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCategories200ResponseDataWithDefaults() *ListCategories200ResponseData {
	this := ListCategories200ResponseData{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ListCategories200ResponseData) GetCategories() []Category {
	if o == nil || IsNil(o.Categories) {
		var ret []Category
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCategories200ResponseData) GetCategoriesOk() ([]Category, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ListCategories200ResponseData) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *ListCategories200ResponseData) SetCategories(v []Category) {
	o.Categories = v
}

func (o ListCategories200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListCategories200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

type NullableListCategories200ResponseData struct {
	value *ListCategories200ResponseData
	isSet bool
}

func (v NullableListCategories200ResponseData) Get() *ListCategories200ResponseData {
	return v.value
}

func (v *NullableListCategories200ResponseData) Set(val *ListCategories200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableListCategories200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableListCategories200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCategories200ResponseData(val *ListCategories200ResponseData) *NullableListCategories200ResponseData {
	return &NullableListCategories200ResponseData{value: val, isSet: true}
}

func (v NullableListCategories200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCategories200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


