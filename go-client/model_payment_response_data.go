/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentResponseData{}

// PaymentResponseData struct for PaymentResponseData
type PaymentResponseData struct {
	// Sellix hosted payment page.
	Url string `json:"url"`
	// Unique ID of the invoice created for the payment.
	Uniqid string `json:"uniqid"`
	// Sellix hosted payment page with url unique to your shop.
	UrlBranded *string `json:"url_branded,omitempty"`
}

type _PaymentResponseData PaymentResponseData

// NewPaymentResponseData instantiates a new PaymentResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentResponseData(url string, uniqid string) *PaymentResponseData {
	this := PaymentResponseData{}
	this.Url = url
	this.Uniqid = uniqid
	return &this
}

// NewPaymentResponseDataWithDefaults instantiates a new PaymentResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentResponseDataWithDefaults() *PaymentResponseData {
	this := PaymentResponseData{}
	return &this
}

// GetUrl returns the Url field value
func (o *PaymentResponseData) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PaymentResponseData) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PaymentResponseData) SetUrl(v string) {
	o.Url = v
}

// GetUniqid returns the Uniqid field value
func (o *PaymentResponseData) GetUniqid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value
// and a boolean to check if the value has been set.
func (o *PaymentResponseData) GetUniqidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uniqid, true
}

// SetUniqid sets field value
func (o *PaymentResponseData) SetUniqid(v string) {
	o.Uniqid = v
}

// GetUrlBranded returns the UrlBranded field value if set, zero value otherwise.
func (o *PaymentResponseData) GetUrlBranded() string {
	if o == nil || IsNil(o.UrlBranded) {
		var ret string
		return ret
	}
	return *o.UrlBranded
}

// GetUrlBrandedOk returns a tuple with the UrlBranded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponseData) GetUrlBrandedOk() (*string, bool) {
	if o == nil || IsNil(o.UrlBranded) {
		return nil, false
	}
	return o.UrlBranded, true
}

// HasUrlBranded returns a boolean if a field has been set.
func (o *PaymentResponseData) HasUrlBranded() bool {
	if o != nil && !IsNil(o.UrlBranded) {
		return true
	}

	return false
}

// SetUrlBranded gets a reference to the given string and assigns it to the UrlBranded field.
func (o *PaymentResponseData) SetUrlBranded(v string) {
	o.UrlBranded = &v
}

func (o PaymentResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["uniqid"] = o.Uniqid
	if !IsNil(o.UrlBranded) {
		toSerialize["url_branded"] = o.UrlBranded
	}
	return toSerialize, nil
}

func (o *PaymentResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"uniqid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentResponseData := _PaymentResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentResponseData)

	if err != nil {
		return err
	}

	*o = PaymentResponseData(varPaymentResponseData)

	return err
}

type NullablePaymentResponseData struct {
	value *PaymentResponseData
	isSet bool
}

func (v NullablePaymentResponseData) Get() *PaymentResponseData {
	return v.value
}

func (v *NullablePaymentResponseData) Set(val *PaymentResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentResponseData(val *PaymentResponseData) *NullablePaymentResponseData {
	return &NullablePaymentResponseData{value: val, isSet: true}
}

func (v NullablePaymentResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


