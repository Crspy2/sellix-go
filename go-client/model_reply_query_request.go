/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplyQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplyQueryRequest{}

// ReplyQueryRequest struct for ReplyQueryRequest
type ReplyQueryRequest struct {
	Reply string `json:"reply"`
}

type _ReplyQueryRequest ReplyQueryRequest

// NewReplyQueryRequest instantiates a new ReplyQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplyQueryRequest(reply string) *ReplyQueryRequest {
	this := ReplyQueryRequest{}
	this.Reply = reply
	return &this
}

// NewReplyQueryRequestWithDefaults instantiates a new ReplyQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplyQueryRequestWithDefaults() *ReplyQueryRequest {
	this := ReplyQueryRequest{}
	return &this
}

// GetReply returns the Reply field value
func (o *ReplyQueryRequest) GetReply() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reply
}

// GetReplyOk returns a tuple with the Reply field value
// and a boolean to check if the value has been set.
func (o *ReplyQueryRequest) GetReplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reply, true
}

// SetReply sets field value
func (o *ReplyQueryRequest) SetReply(v string) {
	o.Reply = v
}

func (o ReplyQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplyQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reply"] = o.Reply
	return toSerialize, nil
}

func (o *ReplyQueryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reply",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplyQueryRequest := _ReplyQueryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplyQueryRequest)

	if err != nil {
		return err
	}

	*o = ReplyQueryRequest(varReplyQueryRequest)

	return err
}

type NullableReplyQueryRequest struct {
	value *ReplyQueryRequest
	isSet bool
}

func (v NullableReplyQueryRequest) Get() *ReplyQueryRequest {
	return v.value
}

func (v *NullableReplyQueryRequest) Set(val *ReplyQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplyQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplyQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplyQueryRequest(val *ReplyQueryRequest) *NullableReplyQueryRequest {
	return &NullableReplyQueryRequest{value: val, isSet: true}
}

func (v NullableReplyQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplyQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


