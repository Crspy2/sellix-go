/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProductVariant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariant{}

// ProductVariant Product variant object.
type ProductVariant struct {
	// The price of the product variant.
	Price *float32 `json:"price,omitempty"`
	// The title of the product variant.
	Title *string `json:"title,omitempty"`
	// The description of the product variant.
	Description *string `json:"description,omitempty"`
	PriceConversions *FeedbackProductPriceConversions `json:"price_conversions,omitempty"`
}

// NewProductVariant instantiates a new ProductVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariant() *ProductVariant {
	this := ProductVariant{}
	return &this
}

// NewProductVariantWithDefaults instantiates a new ProductVariant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantWithDefaults() *ProductVariant {
	this := ProductVariant{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ProductVariant) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariant) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductVariant) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ProductVariant) SetPrice(v float32) {
	o.Price = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProductVariant) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariant) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProductVariant) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProductVariant) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductVariant) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariant) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductVariant) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductVariant) SetDescription(v string) {
	o.Description = &v
}

// GetPriceConversions returns the PriceConversions field value if set, zero value otherwise.
func (o *ProductVariant) GetPriceConversions() FeedbackProductPriceConversions {
	if o == nil || IsNil(o.PriceConversions) {
		var ret FeedbackProductPriceConversions
		return ret
	}
	return *o.PriceConversions
}

// GetPriceConversionsOk returns a tuple with the PriceConversions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariant) GetPriceConversionsOk() (*FeedbackProductPriceConversions, bool) {
	if o == nil || IsNil(o.PriceConversions) {
		return nil, false
	}
	return o.PriceConversions, true
}

// HasPriceConversions returns a boolean if a field has been set.
func (o *ProductVariant) HasPriceConversions() bool {
	if o != nil && !IsNil(o.PriceConversions) {
		return true
	}

	return false
}

// SetPriceConversions gets a reference to the given FeedbackProductPriceConversions and assigns it to the PriceConversions field.
func (o *ProductVariant) SetPriceConversions(v FeedbackProductPriceConversions) {
	o.PriceConversions = &v
}

func (o ProductVariant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.PriceConversions) {
		toSerialize["price_conversions"] = o.PriceConversions
	}
	return toSerialize, nil
}

type NullableProductVariant struct {
	value *ProductVariant
	isSet bool
}

func (v NullableProductVariant) Get() *ProductVariant {
	return v.value
}

func (v *NullableProductVariant) Set(val *ProductVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariant(val *ProductVariant) *NullableProductVariant {
	return &NullableProductVariant{value: val, isSet: true}
}

func (v NullableProductVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


