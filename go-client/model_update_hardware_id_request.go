/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateHardwareIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateHardwareIdRequest{}

// UpdateHardwareIdRequest struct for UpdateHardwareIdRequest
type UpdateHardwareIdRequest struct {
	// Uniqid of the license product.
	ProductId string `json:"product_id"`
	// License key purchase by the customer.
	Key string `json:"key"`
	// Hardware ID to be assigned to the license.
	HardwareId string `json:"hardware_id"`
}

type _UpdateHardwareIdRequest UpdateHardwareIdRequest

// NewUpdateHardwareIdRequest instantiates a new UpdateHardwareIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateHardwareIdRequest(productId string, key string, hardwareId string) *UpdateHardwareIdRequest {
	this := UpdateHardwareIdRequest{}
	this.ProductId = productId
	this.Key = key
	this.HardwareId = hardwareId
	return &this
}

// NewUpdateHardwareIdRequestWithDefaults instantiates a new UpdateHardwareIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateHardwareIdRequestWithDefaults() *UpdateHardwareIdRequest {
	this := UpdateHardwareIdRequest{}
	return &this
}

// GetProductId returns the ProductId field value
func (o *UpdateHardwareIdRequest) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *UpdateHardwareIdRequest) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *UpdateHardwareIdRequest) SetProductId(v string) {
	o.ProductId = v
}

// GetKey returns the Key field value
func (o *UpdateHardwareIdRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *UpdateHardwareIdRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *UpdateHardwareIdRequest) SetKey(v string) {
	o.Key = v
}

// GetHardwareId returns the HardwareId field value
func (o *UpdateHardwareIdRequest) GetHardwareId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HardwareId
}

// GetHardwareIdOk returns a tuple with the HardwareId field value
// and a boolean to check if the value has been set.
func (o *UpdateHardwareIdRequest) GetHardwareIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HardwareId, true
}

// SetHardwareId sets field value
func (o *UpdateHardwareIdRequest) SetHardwareId(v string) {
	o.HardwareId = v
}

func (o UpdateHardwareIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateHardwareIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product_id"] = o.ProductId
	toSerialize["key"] = o.Key
	toSerialize["hardware_id"] = o.HardwareId
	return toSerialize, nil
}

func (o *UpdateHardwareIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product_id",
		"key",
		"hardware_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateHardwareIdRequest := _UpdateHardwareIdRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateHardwareIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateHardwareIdRequest(varUpdateHardwareIdRequest)

	return err
}

type NullableUpdateHardwareIdRequest struct {
	value *UpdateHardwareIdRequest
	isSet bool
}

func (v NullableUpdateHardwareIdRequest) Get() *UpdateHardwareIdRequest {
	return v.value
}

func (v *NullableUpdateHardwareIdRequest) Set(val *UpdateHardwareIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateHardwareIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateHardwareIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateHardwareIdRequest(val *UpdateHardwareIdRequest) *NullableUpdateHardwareIdRequest {
	return &NullableUpdateHardwareIdRequest{value: val, isSet: true}
}

func (v NullableUpdateHardwareIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateHardwareIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


