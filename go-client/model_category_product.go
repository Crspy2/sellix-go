/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CategoryProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryProduct{}

// CategoryProduct struct for CategoryProduct
type CategoryProduct struct {
	// Unique ID of the resource, used as reference across the API.
	Uniqid *string `json:"uniqid,omitempty"`
	// Product price.
	Price *float64 `json:"price,omitempty"`
	// Product price in currency.
	PriceDisplay *float64 `json:"price_display,omitempty"`
	// The discount price on the purchased goods.
	PriceDiscount *float32 `json:"price_discount,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	// Whether the product is listed on the storefront
	Unlisted *int32 `json:"unlisted,omitempty"`
	// The product title
	Title *string `json:"title,omitempty"`
	// DEPRECATED: Unique id of the image attachment for this product.
	ImageAttachment *string `json:"image_attachment,omitempty"`
	// Product description.
	Description *string `json:"description,omitempty"`
	// Minimum quantity purchasable of this product.
	QuantityMin *int32 `json:"quantity_min,omitempty"`
	// Maximum quantity purchasable of this product.
	QuantityMax *int32 `json:"quantity_max,omitempty"`
	// At which product quantity should we send a webhook and email warning the merchant.
	QuantityWarning *int32 `json:"quantity_warning,omitempty"`
	CustomFields []CustomFieldsArrayInner `json:"custom_fields,omitempty"`
	// Product type.
	Type *string `json:"type,omitempty"`
	// The shop ID to which this resource belongs.
	ShopId *float32 `json:"shop_id,omitempty"`
	Gateways []string `json:"gateways,omitempty"`
	// Minimum number of confirmations for a crypto payment to be accepted.
	CryptoConfirmationsNeeded *int32 `json:"crypto_confirmations_needed,omitempty"`
	// If private is true, the product is hidden on the storefront and cannot be bought with a direct link.
	Private *bool `json:"private,omitempty"`
	// Stock of the current product, can be -1 for unlimited stock.
	Stock *int32 `json:"stock,omitempty"`
	// Sort order of this product.
	SortPriority *int32 `json:"sort_priority,omitempty"`
	// Whether the product cannot be bought but is shown in the storefront.
	OnHold *int32 `json:"on_hold,omitempty"`
	// Timestamp for the creation of the product.
	CreatedAt *int32 `json:"created_at,omitempty"`
	// Date, available if the product has been edited.
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// DEPRECATED: The name of the product image with the file type
	ImageName *string `json:"image_name,omitempty"`
	// Where the image is stored in Sellix's self-hosted CDN.
	ImageStorage *string `json:"image_storage,omitempty"`
	// The cloudflare image ID of this product, replaces image_attachment and image_name. Format https://imagedelivery.net/95QNzrEeP7RU5l5WdbyrKw/<cloudflare_image_id>/<variant_name> where variant_name can be shopItem, avatar, icon, imageAvatarFeedback, public, productImageCart.
	CloudflareImageId *string `json:"cloudflare_image_id,omitempty"`
	// The category the product is a part of
	CategoryId *string `json:"category_id,omitempty"`
	// The id of the current product
	ProductId *string `json:"product_id,omitempty"`
}

// NewCategoryProduct instantiates a new CategoryProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryProduct() *CategoryProduct {
	this := CategoryProduct{}
	return &this
}

// NewCategoryProductWithDefaults instantiates a new CategoryProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryProductWithDefaults() *CategoryProduct {
	this := CategoryProduct{}
	return &this
}

// GetUniqid returns the Uniqid field value if set, zero value otherwise.
func (o *CategoryProduct) GetUniqid() string {
	if o == nil || IsNil(o.Uniqid) {
		var ret string
		return ret
	}
	return *o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqid) {
		return nil, false
	}
	return o.Uniqid, true
}

// HasUniqid returns a boolean if a field has been set.
func (o *CategoryProduct) HasUniqid() bool {
	if o != nil && !IsNil(o.Uniqid) {
		return true
	}

	return false
}

// SetUniqid gets a reference to the given string and assigns it to the Uniqid field.
func (o *CategoryProduct) SetUniqid(v string) {
	o.Uniqid = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CategoryProduct) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CategoryProduct) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *CategoryProduct) SetPrice(v float64) {
	o.Price = &v
}

// GetPriceDisplay returns the PriceDisplay field value if set, zero value otherwise.
func (o *CategoryProduct) GetPriceDisplay() float64 {
	if o == nil || IsNil(o.PriceDisplay) {
		var ret float64
		return ret
	}
	return *o.PriceDisplay
}

// GetPriceDisplayOk returns a tuple with the PriceDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetPriceDisplayOk() (*float64, bool) {
	if o == nil || IsNil(o.PriceDisplay) {
		return nil, false
	}
	return o.PriceDisplay, true
}

// HasPriceDisplay returns a boolean if a field has been set.
func (o *CategoryProduct) HasPriceDisplay() bool {
	if o != nil && !IsNil(o.PriceDisplay) {
		return true
	}

	return false
}

// SetPriceDisplay gets a reference to the given float64 and assigns it to the PriceDisplay field.
func (o *CategoryProduct) SetPriceDisplay(v float64) {
	o.PriceDisplay = &v
}

// GetPriceDiscount returns the PriceDiscount field value if set, zero value otherwise.
func (o *CategoryProduct) GetPriceDiscount() float32 {
	if o == nil || IsNil(o.PriceDiscount) {
		var ret float32
		return ret
	}
	return *o.PriceDiscount
}

// GetPriceDiscountOk returns a tuple with the PriceDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetPriceDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceDiscount) {
		return nil, false
	}
	return o.PriceDiscount, true
}

// HasPriceDiscount returns a boolean if a field has been set.
func (o *CategoryProduct) HasPriceDiscount() bool {
	if o != nil && !IsNil(o.PriceDiscount) {
		return true
	}

	return false
}

// SetPriceDiscount gets a reference to the given float32 and assigns it to the PriceDiscount field.
func (o *CategoryProduct) SetPriceDiscount(v float32) {
	o.PriceDiscount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CategoryProduct) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CategoryProduct) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *CategoryProduct) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetUnlisted returns the Unlisted field value if set, zero value otherwise.
func (o *CategoryProduct) GetUnlisted() int32 {
	if o == nil || IsNil(o.Unlisted) {
		var ret int32
		return ret
	}
	return *o.Unlisted
}

// GetUnlistedOk returns a tuple with the Unlisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetUnlistedOk() (*int32, bool) {
	if o == nil || IsNil(o.Unlisted) {
		return nil, false
	}
	return o.Unlisted, true
}

// HasUnlisted returns a boolean if a field has been set.
func (o *CategoryProduct) HasUnlisted() bool {
	if o != nil && !IsNil(o.Unlisted) {
		return true
	}

	return false
}

// SetUnlisted gets a reference to the given int32 and assigns it to the Unlisted field.
func (o *CategoryProduct) SetUnlisted(v int32) {
	o.Unlisted = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CategoryProduct) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CategoryProduct) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CategoryProduct) SetTitle(v string) {
	o.Title = &v
}

// GetImageAttachment returns the ImageAttachment field value if set, zero value otherwise.
func (o *CategoryProduct) GetImageAttachment() string {
	if o == nil || IsNil(o.ImageAttachment) {
		var ret string
		return ret
	}
	return *o.ImageAttachment
}

// GetImageAttachmentOk returns a tuple with the ImageAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetImageAttachmentOk() (*string, bool) {
	if o == nil || IsNil(o.ImageAttachment) {
		return nil, false
	}
	return o.ImageAttachment, true
}

// HasImageAttachment returns a boolean if a field has been set.
func (o *CategoryProduct) HasImageAttachment() bool {
	if o != nil && !IsNil(o.ImageAttachment) {
		return true
	}

	return false
}

// SetImageAttachment gets a reference to the given string and assigns it to the ImageAttachment field.
func (o *CategoryProduct) SetImageAttachment(v string) {
	o.ImageAttachment = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CategoryProduct) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CategoryProduct) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CategoryProduct) SetDescription(v string) {
	o.Description = &v
}

// GetQuantityMin returns the QuantityMin field value if set, zero value otherwise.
func (o *CategoryProduct) GetQuantityMin() int32 {
	if o == nil || IsNil(o.QuantityMin) {
		var ret int32
		return ret
	}
	return *o.QuantityMin
}

// GetQuantityMinOk returns a tuple with the QuantityMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetQuantityMinOk() (*int32, bool) {
	if o == nil || IsNil(o.QuantityMin) {
		return nil, false
	}
	return o.QuantityMin, true
}

// HasQuantityMin returns a boolean if a field has been set.
func (o *CategoryProduct) HasQuantityMin() bool {
	if o != nil && !IsNil(o.QuantityMin) {
		return true
	}

	return false
}

// SetQuantityMin gets a reference to the given int32 and assigns it to the QuantityMin field.
func (o *CategoryProduct) SetQuantityMin(v int32) {
	o.QuantityMin = &v
}

// GetQuantityMax returns the QuantityMax field value if set, zero value otherwise.
func (o *CategoryProduct) GetQuantityMax() int32 {
	if o == nil || IsNil(o.QuantityMax) {
		var ret int32
		return ret
	}
	return *o.QuantityMax
}

// GetQuantityMaxOk returns a tuple with the QuantityMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetQuantityMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.QuantityMax) {
		return nil, false
	}
	return o.QuantityMax, true
}

// HasQuantityMax returns a boolean if a field has been set.
func (o *CategoryProduct) HasQuantityMax() bool {
	if o != nil && !IsNil(o.QuantityMax) {
		return true
	}

	return false
}

// SetQuantityMax gets a reference to the given int32 and assigns it to the QuantityMax field.
func (o *CategoryProduct) SetQuantityMax(v int32) {
	o.QuantityMax = &v
}

// GetQuantityWarning returns the QuantityWarning field value if set, zero value otherwise.
func (o *CategoryProduct) GetQuantityWarning() int32 {
	if o == nil || IsNil(o.QuantityWarning) {
		var ret int32
		return ret
	}
	return *o.QuantityWarning
}

// GetQuantityWarningOk returns a tuple with the QuantityWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetQuantityWarningOk() (*int32, bool) {
	if o == nil || IsNil(o.QuantityWarning) {
		return nil, false
	}
	return o.QuantityWarning, true
}

// HasQuantityWarning returns a boolean if a field has been set.
func (o *CategoryProduct) HasQuantityWarning() bool {
	if o != nil && !IsNil(o.QuantityWarning) {
		return true
	}

	return false
}

// SetQuantityWarning gets a reference to the given int32 and assigns it to the QuantityWarning field.
func (o *CategoryProduct) SetQuantityWarning(v int32) {
	o.QuantityWarning = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *CategoryProduct) GetCustomFields() []CustomFieldsArrayInner {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldsArrayInner
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetCustomFieldsOk() ([]CustomFieldsArrayInner, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CategoryProduct) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldsArrayInner and assigns it to the CustomFields field.
func (o *CategoryProduct) SetCustomFields(v []CustomFieldsArrayInner) {
	o.CustomFields = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CategoryProduct) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CategoryProduct) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CategoryProduct) SetType(v string) {
	o.Type = &v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *CategoryProduct) GetShopId() float32 {
	if o == nil || IsNil(o.ShopId) {
		var ret float32
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetShopIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *CategoryProduct) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given float32 and assigns it to the ShopId field.
func (o *CategoryProduct) SetShopId(v float32) {
	o.ShopId = &v
}

// GetGateways returns the Gateways field value if set, zero value otherwise.
func (o *CategoryProduct) GetGateways() []string {
	if o == nil || IsNil(o.Gateways) {
		var ret []string
		return ret
	}
	return o.Gateways
}

// GetGatewaysOk returns a tuple with the Gateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetGatewaysOk() ([]string, bool) {
	if o == nil || IsNil(o.Gateways) {
		return nil, false
	}
	return o.Gateways, true
}

// HasGateways returns a boolean if a field has been set.
func (o *CategoryProduct) HasGateways() bool {
	if o != nil && !IsNil(o.Gateways) {
		return true
	}

	return false
}

// SetGateways gets a reference to the given []string and assigns it to the Gateways field.
func (o *CategoryProduct) SetGateways(v []string) {
	o.Gateways = v
}

// GetCryptoConfirmationsNeeded returns the CryptoConfirmationsNeeded field value if set, zero value otherwise.
func (o *CategoryProduct) GetCryptoConfirmationsNeeded() int32 {
	if o == nil || IsNil(o.CryptoConfirmationsNeeded) {
		var ret int32
		return ret
	}
	return *o.CryptoConfirmationsNeeded
}

// GetCryptoConfirmationsNeededOk returns a tuple with the CryptoConfirmationsNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetCryptoConfirmationsNeededOk() (*int32, bool) {
	if o == nil || IsNil(o.CryptoConfirmationsNeeded) {
		return nil, false
	}
	return o.CryptoConfirmationsNeeded, true
}

// HasCryptoConfirmationsNeeded returns a boolean if a field has been set.
func (o *CategoryProduct) HasCryptoConfirmationsNeeded() bool {
	if o != nil && !IsNil(o.CryptoConfirmationsNeeded) {
		return true
	}

	return false
}

// SetCryptoConfirmationsNeeded gets a reference to the given int32 and assigns it to the CryptoConfirmationsNeeded field.
func (o *CategoryProduct) SetCryptoConfirmationsNeeded(v int32) {
	o.CryptoConfirmationsNeeded = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *CategoryProduct) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *CategoryProduct) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *CategoryProduct) SetPrivate(v bool) {
	o.Private = &v
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *CategoryProduct) GetStock() int32 {
	if o == nil || IsNil(o.Stock) {
		var ret int32
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetStockOk() (*int32, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *CategoryProduct) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given int32 and assigns it to the Stock field.
func (o *CategoryProduct) SetStock(v int32) {
	o.Stock = &v
}

// GetSortPriority returns the SortPriority field value if set, zero value otherwise.
func (o *CategoryProduct) GetSortPriority() int32 {
	if o == nil || IsNil(o.SortPriority) {
		var ret int32
		return ret
	}
	return *o.SortPriority
}

// GetSortPriorityOk returns a tuple with the SortPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetSortPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.SortPriority) {
		return nil, false
	}
	return o.SortPriority, true
}

// HasSortPriority returns a boolean if a field has been set.
func (o *CategoryProduct) HasSortPriority() bool {
	if o != nil && !IsNil(o.SortPriority) {
		return true
	}

	return false
}

// SetSortPriority gets a reference to the given int32 and assigns it to the SortPriority field.
func (o *CategoryProduct) SetSortPriority(v int32) {
	o.SortPriority = &v
}

// GetOnHold returns the OnHold field value if set, zero value otherwise.
func (o *CategoryProduct) GetOnHold() int32 {
	if o == nil || IsNil(o.OnHold) {
		var ret int32
		return ret
	}
	return *o.OnHold
}

// GetOnHoldOk returns a tuple with the OnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetOnHoldOk() (*int32, bool) {
	if o == nil || IsNil(o.OnHold) {
		return nil, false
	}
	return o.OnHold, true
}

// HasOnHold returns a boolean if a field has been set.
func (o *CategoryProduct) HasOnHold() bool {
	if o != nil && !IsNil(o.OnHold) {
		return true
	}

	return false
}

// SetOnHold gets a reference to the given int32 and assigns it to the OnHold field.
func (o *CategoryProduct) SetOnHold(v int32) {
	o.OnHold = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CategoryProduct) GetCreatedAt() int32 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetCreatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CategoryProduct) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *CategoryProduct) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CategoryProduct) GetUpdatedAt() int32 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CategoryProduct) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *CategoryProduct) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *CategoryProduct) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *CategoryProduct) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *CategoryProduct) SetImageName(v string) {
	o.ImageName = &v
}

// GetImageStorage returns the ImageStorage field value if set, zero value otherwise.
func (o *CategoryProduct) GetImageStorage() string {
	if o == nil || IsNil(o.ImageStorage) {
		var ret string
		return ret
	}
	return *o.ImageStorage
}

// GetImageStorageOk returns a tuple with the ImageStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetImageStorageOk() (*string, bool) {
	if o == nil || IsNil(o.ImageStorage) {
		return nil, false
	}
	return o.ImageStorage, true
}

// HasImageStorage returns a boolean if a field has been set.
func (o *CategoryProduct) HasImageStorage() bool {
	if o != nil && !IsNil(o.ImageStorage) {
		return true
	}

	return false
}

// SetImageStorage gets a reference to the given string and assigns it to the ImageStorage field.
func (o *CategoryProduct) SetImageStorage(v string) {
	o.ImageStorage = &v
}

// GetCloudflareImageId returns the CloudflareImageId field value if set, zero value otherwise.
func (o *CategoryProduct) GetCloudflareImageId() string {
	if o == nil || IsNil(o.CloudflareImageId) {
		var ret string
		return ret
	}
	return *o.CloudflareImageId
}

// GetCloudflareImageIdOk returns a tuple with the CloudflareImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetCloudflareImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudflareImageId) {
		return nil, false
	}
	return o.CloudflareImageId, true
}

// HasCloudflareImageId returns a boolean if a field has been set.
func (o *CategoryProduct) HasCloudflareImageId() bool {
	if o != nil && !IsNil(o.CloudflareImageId) {
		return true
	}

	return false
}

// SetCloudflareImageId gets a reference to the given string and assigns it to the CloudflareImageId field.
func (o *CategoryProduct) SetCloudflareImageId(v string) {
	o.CloudflareImageId = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *CategoryProduct) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *CategoryProduct) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *CategoryProduct) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *CategoryProduct) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryProduct) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *CategoryProduct) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *CategoryProduct) SetProductId(v string) {
	o.ProductId = &v
}

func (o CategoryProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uniqid) {
		toSerialize["uniqid"] = o.Uniqid
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceDisplay) {
		toSerialize["price_display"] = o.PriceDisplay
	}
	if !IsNil(o.PriceDiscount) {
		toSerialize["price_discount"] = o.PriceDiscount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Unlisted) {
		toSerialize["unlisted"] = o.Unlisted
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ImageAttachment) {
		toSerialize["image_attachment"] = o.ImageAttachment
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.QuantityMin) {
		toSerialize["quantity_min"] = o.QuantityMin
	}
	if !IsNil(o.QuantityMax) {
		toSerialize["quantity_max"] = o.QuantityMax
	}
	if !IsNil(o.QuantityWarning) {
		toSerialize["quantity_warning"] = o.QuantityWarning
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.Gateways) {
		toSerialize["gateways"] = o.Gateways
	}
	if !IsNil(o.CryptoConfirmationsNeeded) {
		toSerialize["crypto_confirmations_needed"] = o.CryptoConfirmationsNeeded
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Stock) {
		toSerialize["stock"] = o.Stock
	}
	if !IsNil(o.SortPriority) {
		toSerialize["sort_priority"] = o.SortPriority
	}
	if !IsNil(o.OnHold) {
		toSerialize["on_hold"] = o.OnHold
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ImageName) {
		toSerialize["image_name"] = o.ImageName
	}
	if !IsNil(o.ImageStorage) {
		toSerialize["image_storage"] = o.ImageStorage
	}
	if !IsNil(o.CloudflareImageId) {
		toSerialize["cloudflare_image_id"] = o.CloudflareImageId
	}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	return toSerialize, nil
}

type NullableCategoryProduct struct {
	value *CategoryProduct
	isSet bool
}

func (v NullableCategoryProduct) Get() *CategoryProduct {
	return v.value
}

func (v *NullableCategoryProduct) Set(val *CategoryProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryProduct(val *CategoryProduct) *NullableCategoryProduct {
	return &NullableCategoryProduct{value: val, isSet: true}
}

func (v NullableCategoryProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


