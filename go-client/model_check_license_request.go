/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckLicenseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckLicenseRequest{}

// CheckLicenseRequest struct for CheckLicenseRequest
type CheckLicenseRequest struct {
	// Uniqid of the license product.
	ProductId string `json:"product_id"`
	// License key purchase by the customer.
	Key string `json:"key"`
	// Hardware ID to be assigned to the license. If passed, the hardware ID will be checked against the license key.
	HardwareId *string `json:"hardware_id,omitempty"`
}

type _CheckLicenseRequest CheckLicenseRequest

// NewCheckLicenseRequest instantiates a new CheckLicenseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckLicenseRequest(productId string, key string) *CheckLicenseRequest {
	this := CheckLicenseRequest{}
	this.ProductId = productId
	this.Key = key
	return &this
}

// NewCheckLicenseRequestWithDefaults instantiates a new CheckLicenseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckLicenseRequestWithDefaults() *CheckLicenseRequest {
	this := CheckLicenseRequest{}
	return &this
}

// GetProductId returns the ProductId field value
func (o *CheckLicenseRequest) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *CheckLicenseRequest) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *CheckLicenseRequest) SetProductId(v string) {
	o.ProductId = v
}

// GetKey returns the Key field value
func (o *CheckLicenseRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CheckLicenseRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CheckLicenseRequest) SetKey(v string) {
	o.Key = v
}

// GetHardwareId returns the HardwareId field value if set, zero value otherwise.
func (o *CheckLicenseRequest) GetHardwareId() string {
	if o == nil || IsNil(o.HardwareId) {
		var ret string
		return ret
	}
	return *o.HardwareId
}

// GetHardwareIdOk returns a tuple with the HardwareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckLicenseRequest) GetHardwareIdOk() (*string, bool) {
	if o == nil || IsNil(o.HardwareId) {
		return nil, false
	}
	return o.HardwareId, true
}

// HasHardwareId returns a boolean if a field has been set.
func (o *CheckLicenseRequest) HasHardwareId() bool {
	if o != nil && !IsNil(o.HardwareId) {
		return true
	}

	return false
}

// SetHardwareId gets a reference to the given string and assigns it to the HardwareId field.
func (o *CheckLicenseRequest) SetHardwareId(v string) {
	o.HardwareId = &v
}

func (o CheckLicenseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckLicenseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product_id"] = o.ProductId
	toSerialize["key"] = o.Key
	if !IsNil(o.HardwareId) {
		toSerialize["hardware_id"] = o.HardwareId
	}
	return toSerialize, nil
}

func (o *CheckLicenseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product_id",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckLicenseRequest := _CheckLicenseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckLicenseRequest)

	if err != nil {
		return err
	}

	*o = CheckLicenseRequest(varCheckLicenseRequest)

	return err
}

type NullableCheckLicenseRequest struct {
	value *CheckLicenseRequest
	isSet bool
}

func (v NullableCheckLicenseRequest) Get() *CheckLicenseRequest {
	return v.value
}

func (v *NullableCheckLicenseRequest) Set(val *CheckLicenseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckLicenseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckLicenseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckLicenseRequest(val *CheckLicenseRequest) *NullableCheckLicenseRequest {
	return &NullableCheckLicenseRequest{value: val, isSet: true}
}

func (v NullableCheckLicenseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckLicenseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


