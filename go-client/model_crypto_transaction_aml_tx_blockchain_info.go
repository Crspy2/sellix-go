/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CryptoTransactionAmlTxBlockchainInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoTransactionAmlTxBlockchainInfo{}

// CryptoTransactionAmlTxBlockchainInfo struct for CryptoTransactionAmlTxBlockchainInfo
type CryptoTransactionAmlTxBlockchainInfo struct {
	Address *CryptoTransactionAmlTxBlockchainInfoAddress `json:"address,omitempty"`
	Transaction *CryptoTransactionAmlTxBlockchainInfoTransaction `json:"transaction,omitempty"`
}

// NewCryptoTransactionAmlTxBlockchainInfo instantiates a new CryptoTransactionAmlTxBlockchainInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoTransactionAmlTxBlockchainInfo() *CryptoTransactionAmlTxBlockchainInfo {
	this := CryptoTransactionAmlTxBlockchainInfo{}
	return &this
}

// NewCryptoTransactionAmlTxBlockchainInfoWithDefaults instantiates a new CryptoTransactionAmlTxBlockchainInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoTransactionAmlTxBlockchainInfoWithDefaults() *CryptoTransactionAmlTxBlockchainInfo {
	this := CryptoTransactionAmlTxBlockchainInfo{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *CryptoTransactionAmlTxBlockchainInfo) GetAddress() CryptoTransactionAmlTxBlockchainInfoAddress {
	if o == nil || IsNil(o.Address) {
		var ret CryptoTransactionAmlTxBlockchainInfoAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoTransactionAmlTxBlockchainInfo) GetAddressOk() (*CryptoTransactionAmlTxBlockchainInfoAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *CryptoTransactionAmlTxBlockchainInfo) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given CryptoTransactionAmlTxBlockchainInfoAddress and assigns it to the Address field.
func (o *CryptoTransactionAmlTxBlockchainInfo) SetAddress(v CryptoTransactionAmlTxBlockchainInfoAddress) {
	o.Address = &v
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *CryptoTransactionAmlTxBlockchainInfo) GetTransaction() CryptoTransactionAmlTxBlockchainInfoTransaction {
	if o == nil || IsNil(o.Transaction) {
		var ret CryptoTransactionAmlTxBlockchainInfoTransaction
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoTransactionAmlTxBlockchainInfo) GetTransactionOk() (*CryptoTransactionAmlTxBlockchainInfoTransaction, bool) {
	if o == nil || IsNil(o.Transaction) {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *CryptoTransactionAmlTxBlockchainInfo) HasTransaction() bool {
	if o != nil && !IsNil(o.Transaction) {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given CryptoTransactionAmlTxBlockchainInfoTransaction and assigns it to the Transaction field.
func (o *CryptoTransactionAmlTxBlockchainInfo) SetTransaction(v CryptoTransactionAmlTxBlockchainInfoTransaction) {
	o.Transaction = &v
}

func (o CryptoTransactionAmlTxBlockchainInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoTransactionAmlTxBlockchainInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Transaction) {
		toSerialize["transaction"] = o.Transaction
	}
	return toSerialize, nil
}

type NullableCryptoTransactionAmlTxBlockchainInfo struct {
	value *CryptoTransactionAmlTxBlockchainInfo
	isSet bool
}

func (v NullableCryptoTransactionAmlTxBlockchainInfo) Get() *CryptoTransactionAmlTxBlockchainInfo {
	return v.value
}

func (v *NullableCryptoTransactionAmlTxBlockchainInfo) Set(val *CryptoTransactionAmlTxBlockchainInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoTransactionAmlTxBlockchainInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoTransactionAmlTxBlockchainInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoTransactionAmlTxBlockchainInfo(val *CryptoTransactionAmlTxBlockchainInfo) *NullableCryptoTransactionAmlTxBlockchainInfo {
	return &NullableCryptoTransactionAmlTxBlockchainInfo{value: val, isSet: true}
}

func (v NullableCryptoTransactionAmlTxBlockchainInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoTransactionAmlTxBlockchainInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


