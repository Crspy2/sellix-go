/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateWhitelistRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWhitelistRequest{}

// CreateWhitelistRequest struct for CreateWhitelistRequest
type CreateWhitelistRequest struct {
	Type string `json:"type"`
	Data string `json:"data"`
	Note *string `json:"note,omitempty"`
}

type _CreateWhitelistRequest CreateWhitelistRequest

// NewCreateWhitelistRequest instantiates a new CreateWhitelistRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWhitelistRequest(type_ string, data string) *CreateWhitelistRequest {
	this := CreateWhitelistRequest{}
	this.Type = type_
	this.Data = data
	return &this
}

// NewCreateWhitelistRequestWithDefaults instantiates a new CreateWhitelistRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWhitelistRequestWithDefaults() *CreateWhitelistRequest {
	this := CreateWhitelistRequest{}
	return &this
}

// GetType returns the Type field value
func (o *CreateWhitelistRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateWhitelistRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateWhitelistRequest) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value
func (o *CreateWhitelistRequest) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreateWhitelistRequest) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CreateWhitelistRequest) SetData(v string) {
	o.Data = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *CreateWhitelistRequest) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWhitelistRequest) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *CreateWhitelistRequest) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *CreateWhitelistRequest) SetNote(v string) {
	o.Note = &v
}

func (o CreateWhitelistRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWhitelistRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["data"] = o.Data
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *CreateWhitelistRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWhitelistRequest := _CreateWhitelistRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateWhitelistRequest)

	if err != nil {
		return err
	}

	*o = CreateWhitelistRequest(varCreateWhitelistRequest)

	return err
}

type NullableCreateWhitelistRequest struct {
	value *CreateWhitelistRequest
	isSet bool
}

func (v NullableCreateWhitelistRequest) Get() *CreateWhitelistRequest {
	return v.value
}

func (v *NullableCreateWhitelistRequest) Set(val *CreateWhitelistRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWhitelistRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWhitelistRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWhitelistRequest(val *CreateWhitelistRequest) *NullableCreateWhitelistRequest {
	return &NullableCreateWhitelistRequest{value: val, isSet: true}
}

func (v NullableCreateWhitelistRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWhitelistRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


