/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the CreateSubscriptionv2RequestTaxData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubscriptionv2RequestTaxData{}

// CreateSubscriptionv2RequestTaxData struct for CreateSubscriptionv2RequestTaxData
type CreateSubscriptionv2RequestTaxData struct {
	// The two letter ISO country code for your country. This is used to determine the correct tax rate to apply to the subscription.
	CountryCode *string `json:"country_code,omitempty"`
	// The city your business is located in. This is used to determine the correct tax rate to apply to the subscription.
	City *string `json:"city,omitempty"`
}

// NewCreateSubscriptionv2RequestTaxData instantiates a new CreateSubscriptionv2RequestTaxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubscriptionv2RequestTaxData() *CreateSubscriptionv2RequestTaxData {
	this := CreateSubscriptionv2RequestTaxData{}
	return &this
}

// NewCreateSubscriptionv2RequestTaxDataWithDefaults instantiates a new CreateSubscriptionv2RequestTaxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubscriptionv2RequestTaxDataWithDefaults() *CreateSubscriptionv2RequestTaxData {
	this := CreateSubscriptionv2RequestTaxData{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *CreateSubscriptionv2RequestTaxData) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionv2RequestTaxData) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *CreateSubscriptionv2RequestTaxData) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *CreateSubscriptionv2RequestTaxData) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CreateSubscriptionv2RequestTaxData) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionv2RequestTaxData) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CreateSubscriptionv2RequestTaxData) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CreateSubscriptionv2RequestTaxData) SetCity(v string) {
	o.City = &v
}

func (o CreateSubscriptionv2RequestTaxData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubscriptionv2RequestTaxData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	return toSerialize, nil
}

type NullableCreateSubscriptionv2RequestTaxData struct {
	value *CreateSubscriptionv2RequestTaxData
	isSet bool
}

func (v NullableCreateSubscriptionv2RequestTaxData) Get() *CreateSubscriptionv2RequestTaxData {
	return v.value
}

func (v *NullableCreateSubscriptionv2RequestTaxData) Set(val *CreateSubscriptionv2RequestTaxData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubscriptionv2RequestTaxData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubscriptionv2RequestTaxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubscriptionv2RequestTaxData(val *CreateSubscriptionv2RequestTaxData) *NullableCreateSubscriptionv2RequestTaxData {
	return &NullableCreateSubscriptionv2RequestTaxData{value: val, isSet: true}
}

func (v NullableCreateSubscriptionv2RequestTaxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubscriptionv2RequestTaxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


