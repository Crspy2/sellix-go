/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the FeeBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeBreakdown{}

// FeeBreakdown struct for FeeBreakdown
type FeeBreakdown struct {
	ServiceFee *FeeBreakdownServiceFee `json:"service_fee,omitempty"`
	AmlAnalysis *FeeBreakdownAmlAnalysis `json:"aml_analysis,omitempty"`
	PlatformFee *FeeBreakdownPlatformFee `json:"platform_fee,omitempty"`
}

// NewFeeBreakdown instantiates a new FeeBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeBreakdown() *FeeBreakdown {
	this := FeeBreakdown{}
	return &this
}

// NewFeeBreakdownWithDefaults instantiates a new FeeBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeBreakdownWithDefaults() *FeeBreakdown {
	this := FeeBreakdown{}
	return &this
}

// GetServiceFee returns the ServiceFee field value if set, zero value otherwise.
func (o *FeeBreakdown) GetServiceFee() FeeBreakdownServiceFee {
	if o == nil || IsNil(o.ServiceFee) {
		var ret FeeBreakdownServiceFee
		return ret
	}
	return *o.ServiceFee
}

// GetServiceFeeOk returns a tuple with the ServiceFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeBreakdown) GetServiceFeeOk() (*FeeBreakdownServiceFee, bool) {
	if o == nil || IsNil(o.ServiceFee) {
		return nil, false
	}
	return o.ServiceFee, true
}

// HasServiceFee returns a boolean if a field has been set.
func (o *FeeBreakdown) HasServiceFee() bool {
	if o != nil && !IsNil(o.ServiceFee) {
		return true
	}

	return false
}

// SetServiceFee gets a reference to the given FeeBreakdownServiceFee and assigns it to the ServiceFee field.
func (o *FeeBreakdown) SetServiceFee(v FeeBreakdownServiceFee) {
	o.ServiceFee = &v
}

// GetAmlAnalysis returns the AmlAnalysis field value if set, zero value otherwise.
func (o *FeeBreakdown) GetAmlAnalysis() FeeBreakdownAmlAnalysis {
	if o == nil || IsNil(o.AmlAnalysis) {
		var ret FeeBreakdownAmlAnalysis
		return ret
	}
	return *o.AmlAnalysis
}

// GetAmlAnalysisOk returns a tuple with the AmlAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeBreakdown) GetAmlAnalysisOk() (*FeeBreakdownAmlAnalysis, bool) {
	if o == nil || IsNil(o.AmlAnalysis) {
		return nil, false
	}
	return o.AmlAnalysis, true
}

// HasAmlAnalysis returns a boolean if a field has been set.
func (o *FeeBreakdown) HasAmlAnalysis() bool {
	if o != nil && !IsNil(o.AmlAnalysis) {
		return true
	}

	return false
}

// SetAmlAnalysis gets a reference to the given FeeBreakdownAmlAnalysis and assigns it to the AmlAnalysis field.
func (o *FeeBreakdown) SetAmlAnalysis(v FeeBreakdownAmlAnalysis) {
	o.AmlAnalysis = &v
}

// GetPlatformFee returns the PlatformFee field value if set, zero value otherwise.
func (o *FeeBreakdown) GetPlatformFee() FeeBreakdownPlatformFee {
	if o == nil || IsNil(o.PlatformFee) {
		var ret FeeBreakdownPlatformFee
		return ret
	}
	return *o.PlatformFee
}

// GetPlatformFeeOk returns a tuple with the PlatformFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeBreakdown) GetPlatformFeeOk() (*FeeBreakdownPlatformFee, bool) {
	if o == nil || IsNil(o.PlatformFee) {
		return nil, false
	}
	return o.PlatformFee, true
}

// HasPlatformFee returns a boolean if a field has been set.
func (o *FeeBreakdown) HasPlatformFee() bool {
	if o != nil && !IsNil(o.PlatformFee) {
		return true
	}

	return false
}

// SetPlatformFee gets a reference to the given FeeBreakdownPlatformFee and assigns it to the PlatformFee field.
func (o *FeeBreakdown) SetPlatformFee(v FeeBreakdownPlatformFee) {
	o.PlatformFee = &v
}

func (o FeeBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceFee) {
		toSerialize["service_fee"] = o.ServiceFee
	}
	if !IsNil(o.AmlAnalysis) {
		toSerialize["aml_analysis"] = o.AmlAnalysis
	}
	if !IsNil(o.PlatformFee) {
		toSerialize["platform_fee"] = o.PlatformFee
	}
	return toSerialize, nil
}

type NullableFeeBreakdown struct {
	value *FeeBreakdown
	isSet bool
}

func (v NullableFeeBreakdown) Get() *FeeBreakdown {
	return v.value
}

func (v *NullableFeeBreakdown) Set(val *FeeBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeBreakdown(val *FeeBreakdown) *NullableFeeBreakdown {
	return &NullableFeeBreakdown{value: val, isSet: true}
}

func (v NullableFeeBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


