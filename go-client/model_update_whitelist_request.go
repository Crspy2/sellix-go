/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the UpdateWhitelistRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWhitelistRequest{}

// UpdateWhitelistRequest struct for UpdateWhitelistRequest
type UpdateWhitelistRequest struct {
	Type *string `json:"type,omitempty"`
	Data *string `json:"data,omitempty"`
	Note *string `json:"note,omitempty"`
}

// NewUpdateWhitelistRequest instantiates a new UpdateWhitelistRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWhitelistRequest() *UpdateWhitelistRequest {
	this := UpdateWhitelistRequest{}
	return &this
}

// NewUpdateWhitelistRequestWithDefaults instantiates a new UpdateWhitelistRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWhitelistRequestWithDefaults() *UpdateWhitelistRequest {
	this := UpdateWhitelistRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateWhitelistRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelistRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateWhitelistRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateWhitelistRequest) SetType(v string) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UpdateWhitelistRequest) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelistRequest) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UpdateWhitelistRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *UpdateWhitelistRequest) SetData(v string) {
	o.Data = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *UpdateWhitelistRequest) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelistRequest) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *UpdateWhitelistRequest) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *UpdateWhitelistRequest) SetNote(v string) {
	o.Note = &v
}

func (o UpdateWhitelistRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWhitelistRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableUpdateWhitelistRequest struct {
	value *UpdateWhitelistRequest
	isSet bool
}

func (v NullableUpdateWhitelistRequest) Get() *UpdateWhitelistRequest {
	return v.value
}

func (v *NullableUpdateWhitelistRequest) Set(val *UpdateWhitelistRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWhitelistRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWhitelistRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWhitelistRequest(val *UpdateWhitelistRequest) *NullableUpdateWhitelistRequest {
	return &NullableUpdateWhitelistRequest{value: val, isSet: true}
}

func (v NullableUpdateWhitelistRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWhitelistRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


