/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreatePayment200Response - struct for CreatePayment200Response
type CreatePayment200Response struct {
	PaymentResponse *PaymentResponse
	PaymentResponseWhiteLabel *PaymentResponseWhiteLabel
}

// PaymentResponseAsCreatePayment200Response is a convenience function that returns PaymentResponse wrapped in CreatePayment200Response
func PaymentResponseAsCreatePayment200Response(v *PaymentResponse) CreatePayment200Response {
	return CreatePayment200Response{
		PaymentResponse: v,
	}
}

// PaymentResponseWhiteLabelAsCreatePayment200Response is a convenience function that returns PaymentResponseWhiteLabel wrapped in CreatePayment200Response
func PaymentResponseWhiteLabelAsCreatePayment200Response(v *PaymentResponseWhiteLabel) CreatePayment200Response {
	return CreatePayment200Response{
		PaymentResponseWhiteLabel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreatePayment200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PaymentResponse
	err = newStrictDecoder(data).Decode(&dst.PaymentResponse)
	if err == nil {
		jsonPaymentResponse, _ := json.Marshal(dst.PaymentResponse)
		if string(jsonPaymentResponse) == "{}" { // empty struct
			dst.PaymentResponse = nil
		} else {
			if err = validator.Validate(dst.PaymentResponse); err != nil {
				dst.PaymentResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.PaymentResponse = nil
	}

	// try to unmarshal data into PaymentResponseWhiteLabel
	err = newStrictDecoder(data).Decode(&dst.PaymentResponseWhiteLabel)
	if err == nil {
		jsonPaymentResponseWhiteLabel, _ := json.Marshal(dst.PaymentResponseWhiteLabel)
		if string(jsonPaymentResponseWhiteLabel) == "{}" { // empty struct
			dst.PaymentResponseWhiteLabel = nil
		} else {
			if err = validator.Validate(dst.PaymentResponseWhiteLabel); err != nil {
				dst.PaymentResponseWhiteLabel = nil
			} else {
				match++
			}
		}
	} else {
		dst.PaymentResponseWhiteLabel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PaymentResponse = nil
		dst.PaymentResponseWhiteLabel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreatePayment200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreatePayment200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreatePayment200Response) MarshalJSON() ([]byte, error) {
	if src.PaymentResponse != nil {
		return json.Marshal(&src.PaymentResponse)
	}

	if src.PaymentResponseWhiteLabel != nil {
		return json.Marshal(&src.PaymentResponseWhiteLabel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreatePayment200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PaymentResponse != nil {
		return obj.PaymentResponse
	}

	if obj.PaymentResponseWhiteLabel != nil {
		return obj.PaymentResponseWhiteLabel
	}

	// all schemas are nil
	return nil
}

type NullableCreatePayment200Response struct {
	value *CreatePayment200Response
	isSet bool
}

func (v NullableCreatePayment200Response) Get() *CreatePayment200Response {
	return v.value
}

func (v *NullableCreatePayment200Response) Set(val *CreatePayment200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePayment200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePayment200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePayment200Response(val *CreatePayment200Response) *NullableCreatePayment200Response {
	return &NullableCreatePayment200Response{value: val, isSet: true}
}

func (v NullableCreatePayment200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePayment200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


