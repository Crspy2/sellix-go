/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PaymentInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentInterval{}

// PaymentInterval struct for PaymentInterval
type PaymentInterval struct {
	// Internal ID for the resource
	Id *int32 `json:"id,omitempty"`
	// Unique id for the payment interval; used throughout Sellix's API
	Uniqid *string `json:"uniqid,omitempty"`
	// Internal ID for the product subscription
	ProductSubscriptionId *int32 `json:"product_subscription_id,omitempty"`
	// Internal ID for the subscription's product plan
	ProductPlanSubscriptionId *int32 `json:"product_plan_subscription_id,omitempty"`
	// Unique ID of the invoice created for the payment interval.
	InvoiceUniqid *string `json:"invoice_uniqid,omitempty"`
	// Internal ID for the previous payment interval
	PrevPaymentIntervalId *int32 `json:"prev_payment_interval_id,omitempty"`
	// The index of the payment interval
	Idx *int32 `json:"idx,omitempty"`
	// The time for when the payment interval started
	StartDate *time.Time `json:"start_date,omitempty"`
	// The time for when the payment interval ended
	EndDate *time.Time `json:"end_date,omitempty"`
	// The type of interval
	IntervalType *string `json:"interval_type,omitempty"`
	// The billing type of the payment interval
	PaymentType *string `json:"payment_type,omitempty"`
	// The time for when the payment was made
	PaymentDate *time.Time `json:"payment_date,omitempty"`
	// The number of payment attempts
	PaymentAttempts *int32 `json:"payment_attempts,omitempty"`
	// The time for the last payment attempt
	LastPaymentAttemptDate *time.Time `json:"last_payment_attempt_date,omitempty"`
	// Payment details for the last payment
	LastPaymentDetails map[string]interface{} `json:"last_payment_details,omitempty"`
	// The time for the next payment interval
	NextPaymentAttemptDate *time.Time `json:"next_payment_attempt_date,omitempty"`
	// The status of the payment interval
	Status *string `json:"status,omitempty"`
	// Coupons used for the payment interval
	UsedCoupons []string `json:"used_coupons,omitempty"`
	// The amount of customer balance used for the payment interval
	UsedCustomerBalance *float64 `json:"used_customer_balance,omitempty"`
	UsedCustomerBalanceCurrency *Currency `json:"used_customer_balance_currency,omitempty"`
	// Addons used for the payment interval
	UsedAddons []string `json:"used_addons,omitempty"`
	// Whether or not the trial ending email has been sent
	TrialEndingEmailSent *bool `json:"trial_ending_email_sent,omitempty"`
	// Whether or not the upcoming renewal email has been sent
	UpcomingRenewalEmailSent *bool `json:"upcoming_renewal_email_sent,omitempty"`
	// Whether or not the start event has been processed
	StartEventProcessed *int32 `json:"start_event_processed,omitempty"`
	// Whether or not the end event has been processed
	EndEventProcessed *int32 `json:"end_event_processed,omitempty"`
	// The timestamp for when the payment interval was completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	NextIntervalInfo *PaymentIntervalNextIntervalInfo `json:"next_interval_info,omitempty"`
	// The timestamp for when the payment interval was created
	CreatedAt *int32 `json:"created_at,omitempty"`
	// The timestamp for when the payment interval was last updated
	UpdatedAt *int32 `json:"updated_at,omitempty"`
	// The number of days before the payment interval is charged
	AutoChargeBlock *int32 `json:"auto_charge_block,omitempty"`
	// The status of the invoice
	InvoiceStatus *string `json:"invoice_status,omitempty"`
	InvoiceGateway *Gateway `json:"invoice_gateway,omitempty"`
	// ID of the Sellix shop the payment interval was created for.
	ShopId *int32 `json:"shop_id,omitempty"`
	// Unique ID used within Sellix to identify customers across the API.
	CustomerId *string `json:"customer_id,omitempty"`
	// Internal Sellix ID for the payment method
	PaymentMethodId *int32 `json:"payment_method_id,omitempty"`
	PlanSubscriptionGateway *Gateway `json:"plan_subscription_gateway,omitempty"`
	// Internal Sellix ID for the product
	ProductId *int32 `json:"product_id,omitempty"`
	// Unique ID of the product
	ProductUniqid *string `json:"product_uniqid,omitempty"`
	// Whether or not the product requires an auto payment method
	ProductAutoPaymentMethodRequired *int32 `json:"product_auto_payment_method_required,omitempty"`
}

// NewPaymentInterval instantiates a new PaymentInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInterval() *PaymentInterval {
	this := PaymentInterval{}
	return &this
}

// NewPaymentIntervalWithDefaults instantiates a new PaymentInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentIntervalWithDefaults() *PaymentInterval {
	this := PaymentInterval{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PaymentInterval) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PaymentInterval) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PaymentInterval) SetId(v int32) {
	o.Id = &v
}

// GetUniqid returns the Uniqid field value if set, zero value otherwise.
func (o *PaymentInterval) GetUniqid() string {
	if o == nil || IsNil(o.Uniqid) {
		var ret string
		return ret
	}
	return *o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqid) {
		return nil, false
	}
	return o.Uniqid, true
}

// HasUniqid returns a boolean if a field has been set.
func (o *PaymentInterval) HasUniqid() bool {
	if o != nil && !IsNil(o.Uniqid) {
		return true
	}

	return false
}

// SetUniqid gets a reference to the given string and assigns it to the Uniqid field.
func (o *PaymentInterval) SetUniqid(v string) {
	o.Uniqid = &v
}

// GetProductSubscriptionId returns the ProductSubscriptionId field value if set, zero value otherwise.
func (o *PaymentInterval) GetProductSubscriptionId() int32 {
	if o == nil || IsNil(o.ProductSubscriptionId) {
		var ret int32
		return ret
	}
	return *o.ProductSubscriptionId
}

// GetProductSubscriptionIdOk returns a tuple with the ProductSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetProductSubscriptionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductSubscriptionId) {
		return nil, false
	}
	return o.ProductSubscriptionId, true
}

// HasProductSubscriptionId returns a boolean if a field has been set.
func (o *PaymentInterval) HasProductSubscriptionId() bool {
	if o != nil && !IsNil(o.ProductSubscriptionId) {
		return true
	}

	return false
}

// SetProductSubscriptionId gets a reference to the given int32 and assigns it to the ProductSubscriptionId field.
func (o *PaymentInterval) SetProductSubscriptionId(v int32) {
	o.ProductSubscriptionId = &v
}

// GetProductPlanSubscriptionId returns the ProductPlanSubscriptionId field value if set, zero value otherwise.
func (o *PaymentInterval) GetProductPlanSubscriptionId() int32 {
	if o == nil || IsNil(o.ProductPlanSubscriptionId) {
		var ret int32
		return ret
	}
	return *o.ProductPlanSubscriptionId
}

// GetProductPlanSubscriptionIdOk returns a tuple with the ProductPlanSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetProductPlanSubscriptionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductPlanSubscriptionId) {
		return nil, false
	}
	return o.ProductPlanSubscriptionId, true
}

// HasProductPlanSubscriptionId returns a boolean if a field has been set.
func (o *PaymentInterval) HasProductPlanSubscriptionId() bool {
	if o != nil && !IsNil(o.ProductPlanSubscriptionId) {
		return true
	}

	return false
}

// SetProductPlanSubscriptionId gets a reference to the given int32 and assigns it to the ProductPlanSubscriptionId field.
func (o *PaymentInterval) SetProductPlanSubscriptionId(v int32) {
	o.ProductPlanSubscriptionId = &v
}

// GetInvoiceUniqid returns the InvoiceUniqid field value if set, zero value otherwise.
func (o *PaymentInterval) GetInvoiceUniqid() string {
	if o == nil || IsNil(o.InvoiceUniqid) {
		var ret string
		return ret
	}
	return *o.InvoiceUniqid
}

// GetInvoiceUniqidOk returns a tuple with the InvoiceUniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetInvoiceUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceUniqid) {
		return nil, false
	}
	return o.InvoiceUniqid, true
}

// HasInvoiceUniqid returns a boolean if a field has been set.
func (o *PaymentInterval) HasInvoiceUniqid() bool {
	if o != nil && !IsNil(o.InvoiceUniqid) {
		return true
	}

	return false
}

// SetInvoiceUniqid gets a reference to the given string and assigns it to the InvoiceUniqid field.
func (o *PaymentInterval) SetInvoiceUniqid(v string) {
	o.InvoiceUniqid = &v
}

// GetPrevPaymentIntervalId returns the PrevPaymentIntervalId field value if set, zero value otherwise.
func (o *PaymentInterval) GetPrevPaymentIntervalId() int32 {
	if o == nil || IsNil(o.PrevPaymentIntervalId) {
		var ret int32
		return ret
	}
	return *o.PrevPaymentIntervalId
}

// GetPrevPaymentIntervalIdOk returns a tuple with the PrevPaymentIntervalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetPrevPaymentIntervalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PrevPaymentIntervalId) {
		return nil, false
	}
	return o.PrevPaymentIntervalId, true
}

// HasPrevPaymentIntervalId returns a boolean if a field has been set.
func (o *PaymentInterval) HasPrevPaymentIntervalId() bool {
	if o != nil && !IsNil(o.PrevPaymentIntervalId) {
		return true
	}

	return false
}

// SetPrevPaymentIntervalId gets a reference to the given int32 and assigns it to the PrevPaymentIntervalId field.
func (o *PaymentInterval) SetPrevPaymentIntervalId(v int32) {
	o.PrevPaymentIntervalId = &v
}

// GetIdx returns the Idx field value if set, zero value otherwise.
func (o *PaymentInterval) GetIdx() int32 {
	if o == nil || IsNil(o.Idx) {
		var ret int32
		return ret
	}
	return *o.Idx
}

// GetIdxOk returns a tuple with the Idx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetIdxOk() (*int32, bool) {
	if o == nil || IsNil(o.Idx) {
		return nil, false
	}
	return o.Idx, true
}

// HasIdx returns a boolean if a field has been set.
func (o *PaymentInterval) HasIdx() bool {
	if o != nil && !IsNil(o.Idx) {
		return true
	}

	return false
}

// SetIdx gets a reference to the given int32 and assigns it to the Idx field.
func (o *PaymentInterval) SetIdx(v int32) {
	o.Idx = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PaymentInterval) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PaymentInterval) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *PaymentInterval) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PaymentInterval) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PaymentInterval) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *PaymentInterval) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetIntervalType returns the IntervalType field value if set, zero value otherwise.
func (o *PaymentInterval) GetIntervalType() string {
	if o == nil || IsNil(o.IntervalType) {
		var ret string
		return ret
	}
	return *o.IntervalType
}

// GetIntervalTypeOk returns a tuple with the IntervalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetIntervalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalType) {
		return nil, false
	}
	return o.IntervalType, true
}

// HasIntervalType returns a boolean if a field has been set.
func (o *PaymentInterval) HasIntervalType() bool {
	if o != nil && !IsNil(o.IntervalType) {
		return true
	}

	return false
}

// SetIntervalType gets a reference to the given string and assigns it to the IntervalType field.
func (o *PaymentInterval) SetIntervalType(v string) {
	o.IntervalType = &v
}

// GetPaymentType returns the PaymentType field value if set, zero value otherwise.
func (o *PaymentInterval) GetPaymentType() string {
	if o == nil || IsNil(o.PaymentType) {
		var ret string
		return ret
	}
	return *o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetPaymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentType) {
		return nil, false
	}
	return o.PaymentType, true
}

// HasPaymentType returns a boolean if a field has been set.
func (o *PaymentInterval) HasPaymentType() bool {
	if o != nil && !IsNil(o.PaymentType) {
		return true
	}

	return false
}

// SetPaymentType gets a reference to the given string and assigns it to the PaymentType field.
func (o *PaymentInterval) SetPaymentType(v string) {
	o.PaymentType = &v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *PaymentInterval) GetPaymentDate() time.Time {
	if o == nil || IsNil(o.PaymentDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetPaymentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *PaymentInterval) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given time.Time and assigns it to the PaymentDate field.
func (o *PaymentInterval) SetPaymentDate(v time.Time) {
	o.PaymentDate = &v
}

// GetPaymentAttempts returns the PaymentAttempts field value if set, zero value otherwise.
func (o *PaymentInterval) GetPaymentAttempts() int32 {
	if o == nil || IsNil(o.PaymentAttempts) {
		var ret int32
		return ret
	}
	return *o.PaymentAttempts
}

// GetPaymentAttemptsOk returns a tuple with the PaymentAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetPaymentAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.PaymentAttempts) {
		return nil, false
	}
	return o.PaymentAttempts, true
}

// HasPaymentAttempts returns a boolean if a field has been set.
func (o *PaymentInterval) HasPaymentAttempts() bool {
	if o != nil && !IsNil(o.PaymentAttempts) {
		return true
	}

	return false
}

// SetPaymentAttempts gets a reference to the given int32 and assigns it to the PaymentAttempts field.
func (o *PaymentInterval) SetPaymentAttempts(v int32) {
	o.PaymentAttempts = &v
}

// GetLastPaymentAttemptDate returns the LastPaymentAttemptDate field value if set, zero value otherwise.
func (o *PaymentInterval) GetLastPaymentAttemptDate() time.Time {
	if o == nil || IsNil(o.LastPaymentAttemptDate) {
		var ret time.Time
		return ret
	}
	return *o.LastPaymentAttemptDate
}

// GetLastPaymentAttemptDateOk returns a tuple with the LastPaymentAttemptDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetLastPaymentAttemptDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPaymentAttemptDate) {
		return nil, false
	}
	return o.LastPaymentAttemptDate, true
}

// HasLastPaymentAttemptDate returns a boolean if a field has been set.
func (o *PaymentInterval) HasLastPaymentAttemptDate() bool {
	if o != nil && !IsNil(o.LastPaymentAttemptDate) {
		return true
	}

	return false
}

// SetLastPaymentAttemptDate gets a reference to the given time.Time and assigns it to the LastPaymentAttemptDate field.
func (o *PaymentInterval) SetLastPaymentAttemptDate(v time.Time) {
	o.LastPaymentAttemptDate = &v
}

// GetLastPaymentDetails returns the LastPaymentDetails field value if set, zero value otherwise.
func (o *PaymentInterval) GetLastPaymentDetails() map[string]interface{} {
	if o == nil || IsNil(o.LastPaymentDetails) {
		var ret map[string]interface{}
		return ret
	}
	return o.LastPaymentDetails
}

// GetLastPaymentDetailsOk returns a tuple with the LastPaymentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetLastPaymentDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LastPaymentDetails) {
		return map[string]interface{}{}, false
	}
	return o.LastPaymentDetails, true
}

// HasLastPaymentDetails returns a boolean if a field has been set.
func (o *PaymentInterval) HasLastPaymentDetails() bool {
	if o != nil && !IsNil(o.LastPaymentDetails) {
		return true
	}

	return false
}

// SetLastPaymentDetails gets a reference to the given map[string]interface{} and assigns it to the LastPaymentDetails field.
func (o *PaymentInterval) SetLastPaymentDetails(v map[string]interface{}) {
	o.LastPaymentDetails = v
}

// GetNextPaymentAttemptDate returns the NextPaymentAttemptDate field value if set, zero value otherwise.
func (o *PaymentInterval) GetNextPaymentAttemptDate() time.Time {
	if o == nil || IsNil(o.NextPaymentAttemptDate) {
		var ret time.Time
		return ret
	}
	return *o.NextPaymentAttemptDate
}

// GetNextPaymentAttemptDateOk returns a tuple with the NextPaymentAttemptDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetNextPaymentAttemptDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextPaymentAttemptDate) {
		return nil, false
	}
	return o.NextPaymentAttemptDate, true
}

// HasNextPaymentAttemptDate returns a boolean if a field has been set.
func (o *PaymentInterval) HasNextPaymentAttemptDate() bool {
	if o != nil && !IsNil(o.NextPaymentAttemptDate) {
		return true
	}

	return false
}

// SetNextPaymentAttemptDate gets a reference to the given time.Time and assigns it to the NextPaymentAttemptDate field.
func (o *PaymentInterval) SetNextPaymentAttemptDate(v time.Time) {
	o.NextPaymentAttemptDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PaymentInterval) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PaymentInterval) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PaymentInterval) SetStatus(v string) {
	o.Status = &v
}

// GetUsedCoupons returns the UsedCoupons field value if set, zero value otherwise.
func (o *PaymentInterval) GetUsedCoupons() []string {
	if o == nil || IsNil(o.UsedCoupons) {
		var ret []string
		return ret
	}
	return o.UsedCoupons
}

// GetUsedCouponsOk returns a tuple with the UsedCoupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetUsedCouponsOk() ([]string, bool) {
	if o == nil || IsNil(o.UsedCoupons) {
		return nil, false
	}
	return o.UsedCoupons, true
}

// HasUsedCoupons returns a boolean if a field has been set.
func (o *PaymentInterval) HasUsedCoupons() bool {
	if o != nil && !IsNil(o.UsedCoupons) {
		return true
	}

	return false
}

// SetUsedCoupons gets a reference to the given []string and assigns it to the UsedCoupons field.
func (o *PaymentInterval) SetUsedCoupons(v []string) {
	o.UsedCoupons = v
}

// GetUsedCustomerBalance returns the UsedCustomerBalance field value if set, zero value otherwise.
func (o *PaymentInterval) GetUsedCustomerBalance() float64 {
	if o == nil || IsNil(o.UsedCustomerBalance) {
		var ret float64
		return ret
	}
	return *o.UsedCustomerBalance
}

// GetUsedCustomerBalanceOk returns a tuple with the UsedCustomerBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetUsedCustomerBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.UsedCustomerBalance) {
		return nil, false
	}
	return o.UsedCustomerBalance, true
}

// HasUsedCustomerBalance returns a boolean if a field has been set.
func (o *PaymentInterval) HasUsedCustomerBalance() bool {
	if o != nil && !IsNil(o.UsedCustomerBalance) {
		return true
	}

	return false
}

// SetUsedCustomerBalance gets a reference to the given float64 and assigns it to the UsedCustomerBalance field.
func (o *PaymentInterval) SetUsedCustomerBalance(v float64) {
	o.UsedCustomerBalance = &v
}

// GetUsedCustomerBalanceCurrency returns the UsedCustomerBalanceCurrency field value if set, zero value otherwise.
func (o *PaymentInterval) GetUsedCustomerBalanceCurrency() Currency {
	if o == nil || IsNil(o.UsedCustomerBalanceCurrency) {
		var ret Currency
		return ret
	}
	return *o.UsedCustomerBalanceCurrency
}

// GetUsedCustomerBalanceCurrencyOk returns a tuple with the UsedCustomerBalanceCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetUsedCustomerBalanceCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.UsedCustomerBalanceCurrency) {
		return nil, false
	}
	return o.UsedCustomerBalanceCurrency, true
}

// HasUsedCustomerBalanceCurrency returns a boolean if a field has been set.
func (o *PaymentInterval) HasUsedCustomerBalanceCurrency() bool {
	if o != nil && !IsNil(o.UsedCustomerBalanceCurrency) {
		return true
	}

	return false
}

// SetUsedCustomerBalanceCurrency gets a reference to the given Currency and assigns it to the UsedCustomerBalanceCurrency field.
func (o *PaymentInterval) SetUsedCustomerBalanceCurrency(v Currency) {
	o.UsedCustomerBalanceCurrency = &v
}

// GetUsedAddons returns the UsedAddons field value if set, zero value otherwise.
func (o *PaymentInterval) GetUsedAddons() []string {
	if o == nil || IsNil(o.UsedAddons) {
		var ret []string
		return ret
	}
	return o.UsedAddons
}

// GetUsedAddonsOk returns a tuple with the UsedAddons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetUsedAddonsOk() ([]string, bool) {
	if o == nil || IsNil(o.UsedAddons) {
		return nil, false
	}
	return o.UsedAddons, true
}

// HasUsedAddons returns a boolean if a field has been set.
func (o *PaymentInterval) HasUsedAddons() bool {
	if o != nil && !IsNil(o.UsedAddons) {
		return true
	}

	return false
}

// SetUsedAddons gets a reference to the given []string and assigns it to the UsedAddons field.
func (o *PaymentInterval) SetUsedAddons(v []string) {
	o.UsedAddons = v
}

// GetTrialEndingEmailSent returns the TrialEndingEmailSent field value if set, zero value otherwise.
func (o *PaymentInterval) GetTrialEndingEmailSent() bool {
	if o == nil || IsNil(o.TrialEndingEmailSent) {
		var ret bool
		return ret
	}
	return *o.TrialEndingEmailSent
}

// GetTrialEndingEmailSentOk returns a tuple with the TrialEndingEmailSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetTrialEndingEmailSentOk() (*bool, bool) {
	if o == nil || IsNil(o.TrialEndingEmailSent) {
		return nil, false
	}
	return o.TrialEndingEmailSent, true
}

// HasTrialEndingEmailSent returns a boolean if a field has been set.
func (o *PaymentInterval) HasTrialEndingEmailSent() bool {
	if o != nil && !IsNil(o.TrialEndingEmailSent) {
		return true
	}

	return false
}

// SetTrialEndingEmailSent gets a reference to the given bool and assigns it to the TrialEndingEmailSent field.
func (o *PaymentInterval) SetTrialEndingEmailSent(v bool) {
	o.TrialEndingEmailSent = &v
}

// GetUpcomingRenewalEmailSent returns the UpcomingRenewalEmailSent field value if set, zero value otherwise.
func (o *PaymentInterval) GetUpcomingRenewalEmailSent() bool {
	if o == nil || IsNil(o.UpcomingRenewalEmailSent) {
		var ret bool
		return ret
	}
	return *o.UpcomingRenewalEmailSent
}

// GetUpcomingRenewalEmailSentOk returns a tuple with the UpcomingRenewalEmailSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetUpcomingRenewalEmailSentOk() (*bool, bool) {
	if o == nil || IsNil(o.UpcomingRenewalEmailSent) {
		return nil, false
	}
	return o.UpcomingRenewalEmailSent, true
}

// HasUpcomingRenewalEmailSent returns a boolean if a field has been set.
func (o *PaymentInterval) HasUpcomingRenewalEmailSent() bool {
	if o != nil && !IsNil(o.UpcomingRenewalEmailSent) {
		return true
	}

	return false
}

// SetUpcomingRenewalEmailSent gets a reference to the given bool and assigns it to the UpcomingRenewalEmailSent field.
func (o *PaymentInterval) SetUpcomingRenewalEmailSent(v bool) {
	o.UpcomingRenewalEmailSent = &v
}

// GetStartEventProcessed returns the StartEventProcessed field value if set, zero value otherwise.
func (o *PaymentInterval) GetStartEventProcessed() int32 {
	if o == nil || IsNil(o.StartEventProcessed) {
		var ret int32
		return ret
	}
	return *o.StartEventProcessed
}

// GetStartEventProcessedOk returns a tuple with the StartEventProcessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetStartEventProcessedOk() (*int32, bool) {
	if o == nil || IsNil(o.StartEventProcessed) {
		return nil, false
	}
	return o.StartEventProcessed, true
}

// HasStartEventProcessed returns a boolean if a field has been set.
func (o *PaymentInterval) HasStartEventProcessed() bool {
	if o != nil && !IsNil(o.StartEventProcessed) {
		return true
	}

	return false
}

// SetStartEventProcessed gets a reference to the given int32 and assigns it to the StartEventProcessed field.
func (o *PaymentInterval) SetStartEventProcessed(v int32) {
	o.StartEventProcessed = &v
}

// GetEndEventProcessed returns the EndEventProcessed field value if set, zero value otherwise.
func (o *PaymentInterval) GetEndEventProcessed() int32 {
	if o == nil || IsNil(o.EndEventProcessed) {
		var ret int32
		return ret
	}
	return *o.EndEventProcessed
}

// GetEndEventProcessedOk returns a tuple with the EndEventProcessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetEndEventProcessedOk() (*int32, bool) {
	if o == nil || IsNil(o.EndEventProcessed) {
		return nil, false
	}
	return o.EndEventProcessed, true
}

// HasEndEventProcessed returns a boolean if a field has been set.
func (o *PaymentInterval) HasEndEventProcessed() bool {
	if o != nil && !IsNil(o.EndEventProcessed) {
		return true
	}

	return false
}

// SetEndEventProcessed gets a reference to the given int32 and assigns it to the EndEventProcessed field.
func (o *PaymentInterval) SetEndEventProcessed(v int32) {
	o.EndEventProcessed = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *PaymentInterval) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *PaymentInterval) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *PaymentInterval) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetNextIntervalInfo returns the NextIntervalInfo field value if set, zero value otherwise.
func (o *PaymentInterval) GetNextIntervalInfo() PaymentIntervalNextIntervalInfo {
	if o == nil || IsNil(o.NextIntervalInfo) {
		var ret PaymentIntervalNextIntervalInfo
		return ret
	}
	return *o.NextIntervalInfo
}

// GetNextIntervalInfoOk returns a tuple with the NextIntervalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetNextIntervalInfoOk() (*PaymentIntervalNextIntervalInfo, bool) {
	if o == nil || IsNil(o.NextIntervalInfo) {
		return nil, false
	}
	return o.NextIntervalInfo, true
}

// HasNextIntervalInfo returns a boolean if a field has been set.
func (o *PaymentInterval) HasNextIntervalInfo() bool {
	if o != nil && !IsNil(o.NextIntervalInfo) {
		return true
	}

	return false
}

// SetNextIntervalInfo gets a reference to the given PaymentIntervalNextIntervalInfo and assigns it to the NextIntervalInfo field.
func (o *PaymentInterval) SetNextIntervalInfo(v PaymentIntervalNextIntervalInfo) {
	o.NextIntervalInfo = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PaymentInterval) GetCreatedAt() int32 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetCreatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PaymentInterval) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *PaymentInterval) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PaymentInterval) GetUpdatedAt() int32 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PaymentInterval) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *PaymentInterval) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetAutoChargeBlock returns the AutoChargeBlock field value if set, zero value otherwise.
func (o *PaymentInterval) GetAutoChargeBlock() int32 {
	if o == nil || IsNil(o.AutoChargeBlock) {
		var ret int32
		return ret
	}
	return *o.AutoChargeBlock
}

// GetAutoChargeBlockOk returns a tuple with the AutoChargeBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetAutoChargeBlockOk() (*int32, bool) {
	if o == nil || IsNil(o.AutoChargeBlock) {
		return nil, false
	}
	return o.AutoChargeBlock, true
}

// HasAutoChargeBlock returns a boolean if a field has been set.
func (o *PaymentInterval) HasAutoChargeBlock() bool {
	if o != nil && !IsNil(o.AutoChargeBlock) {
		return true
	}

	return false
}

// SetAutoChargeBlock gets a reference to the given int32 and assigns it to the AutoChargeBlock field.
func (o *PaymentInterval) SetAutoChargeBlock(v int32) {
	o.AutoChargeBlock = &v
}

// GetInvoiceStatus returns the InvoiceStatus field value if set, zero value otherwise.
func (o *PaymentInterval) GetInvoiceStatus() string {
	if o == nil || IsNil(o.InvoiceStatus) {
		var ret string
		return ret
	}
	return *o.InvoiceStatus
}

// GetInvoiceStatusOk returns a tuple with the InvoiceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetInvoiceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceStatus) {
		return nil, false
	}
	return o.InvoiceStatus, true
}

// HasInvoiceStatus returns a boolean if a field has been set.
func (o *PaymentInterval) HasInvoiceStatus() bool {
	if o != nil && !IsNil(o.InvoiceStatus) {
		return true
	}

	return false
}

// SetInvoiceStatus gets a reference to the given string and assigns it to the InvoiceStatus field.
func (o *PaymentInterval) SetInvoiceStatus(v string) {
	o.InvoiceStatus = &v
}

// GetInvoiceGateway returns the InvoiceGateway field value if set, zero value otherwise.
func (o *PaymentInterval) GetInvoiceGateway() Gateway {
	if o == nil || IsNil(o.InvoiceGateway) {
		var ret Gateway
		return ret
	}
	return *o.InvoiceGateway
}

// GetInvoiceGatewayOk returns a tuple with the InvoiceGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetInvoiceGatewayOk() (*Gateway, bool) {
	if o == nil || IsNil(o.InvoiceGateway) {
		return nil, false
	}
	return o.InvoiceGateway, true
}

// HasInvoiceGateway returns a boolean if a field has been set.
func (o *PaymentInterval) HasInvoiceGateway() bool {
	if o != nil && !IsNil(o.InvoiceGateway) {
		return true
	}

	return false
}

// SetInvoiceGateway gets a reference to the given Gateway and assigns it to the InvoiceGateway field.
func (o *PaymentInterval) SetInvoiceGateway(v Gateway) {
	o.InvoiceGateway = &v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *PaymentInterval) GetShopId() int32 {
	if o == nil || IsNil(o.ShopId) {
		var ret int32
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetShopIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *PaymentInterval) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int32 and assigns it to the ShopId field.
func (o *PaymentInterval) SetShopId(v int32) {
	o.ShopId = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *PaymentInterval) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *PaymentInterval) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *PaymentInterval) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetPaymentMethodId returns the PaymentMethodId field value if set, zero value otherwise.
func (o *PaymentInterval) GetPaymentMethodId() int32 {
	if o == nil || IsNil(o.PaymentMethodId) {
		var ret int32
		return ret
	}
	return *o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetPaymentMethodIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PaymentMethodId) {
		return nil, false
	}
	return o.PaymentMethodId, true
}

// HasPaymentMethodId returns a boolean if a field has been set.
func (o *PaymentInterval) HasPaymentMethodId() bool {
	if o != nil && !IsNil(o.PaymentMethodId) {
		return true
	}

	return false
}

// SetPaymentMethodId gets a reference to the given int32 and assigns it to the PaymentMethodId field.
func (o *PaymentInterval) SetPaymentMethodId(v int32) {
	o.PaymentMethodId = &v
}

// GetPlanSubscriptionGateway returns the PlanSubscriptionGateway field value if set, zero value otherwise.
func (o *PaymentInterval) GetPlanSubscriptionGateway() Gateway {
	if o == nil || IsNil(o.PlanSubscriptionGateway) {
		var ret Gateway
		return ret
	}
	return *o.PlanSubscriptionGateway
}

// GetPlanSubscriptionGatewayOk returns a tuple with the PlanSubscriptionGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetPlanSubscriptionGatewayOk() (*Gateway, bool) {
	if o == nil || IsNil(o.PlanSubscriptionGateway) {
		return nil, false
	}
	return o.PlanSubscriptionGateway, true
}

// HasPlanSubscriptionGateway returns a boolean if a field has been set.
func (o *PaymentInterval) HasPlanSubscriptionGateway() bool {
	if o != nil && !IsNil(o.PlanSubscriptionGateway) {
		return true
	}

	return false
}

// SetPlanSubscriptionGateway gets a reference to the given Gateway and assigns it to the PlanSubscriptionGateway field.
func (o *PaymentInterval) SetPlanSubscriptionGateway(v Gateway) {
	o.PlanSubscriptionGateway = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *PaymentInterval) GetProductId() int32 {
	if o == nil || IsNil(o.ProductId) {
		var ret int32
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetProductIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *PaymentInterval) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int32 and assigns it to the ProductId field.
func (o *PaymentInterval) SetProductId(v int32) {
	o.ProductId = &v
}

// GetProductUniqid returns the ProductUniqid field value if set, zero value otherwise.
func (o *PaymentInterval) GetProductUniqid() string {
	if o == nil || IsNil(o.ProductUniqid) {
		var ret string
		return ret
	}
	return *o.ProductUniqid
}

// GetProductUniqidOk returns a tuple with the ProductUniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetProductUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.ProductUniqid) {
		return nil, false
	}
	return o.ProductUniqid, true
}

// HasProductUniqid returns a boolean if a field has been set.
func (o *PaymentInterval) HasProductUniqid() bool {
	if o != nil && !IsNil(o.ProductUniqid) {
		return true
	}

	return false
}

// SetProductUniqid gets a reference to the given string and assigns it to the ProductUniqid field.
func (o *PaymentInterval) SetProductUniqid(v string) {
	o.ProductUniqid = &v
}

// GetProductAutoPaymentMethodRequired returns the ProductAutoPaymentMethodRequired field value if set, zero value otherwise.
func (o *PaymentInterval) GetProductAutoPaymentMethodRequired() int32 {
	if o == nil || IsNil(o.ProductAutoPaymentMethodRequired) {
		var ret int32
		return ret
	}
	return *o.ProductAutoPaymentMethodRequired
}

// GetProductAutoPaymentMethodRequiredOk returns a tuple with the ProductAutoPaymentMethodRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInterval) GetProductAutoPaymentMethodRequiredOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductAutoPaymentMethodRequired) {
		return nil, false
	}
	return o.ProductAutoPaymentMethodRequired, true
}

// HasProductAutoPaymentMethodRequired returns a boolean if a field has been set.
func (o *PaymentInterval) HasProductAutoPaymentMethodRequired() bool {
	if o != nil && !IsNil(o.ProductAutoPaymentMethodRequired) {
		return true
	}

	return false
}

// SetProductAutoPaymentMethodRequired gets a reference to the given int32 and assigns it to the ProductAutoPaymentMethodRequired field.
func (o *PaymentInterval) SetProductAutoPaymentMethodRequired(v int32) {
	o.ProductAutoPaymentMethodRequired = &v
}

func (o PaymentInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uniqid) {
		toSerialize["uniqid"] = o.Uniqid
	}
	if !IsNil(o.ProductSubscriptionId) {
		toSerialize["product_subscription_id"] = o.ProductSubscriptionId
	}
	if !IsNil(o.ProductPlanSubscriptionId) {
		toSerialize["product_plan_subscription_id"] = o.ProductPlanSubscriptionId
	}
	if !IsNil(o.InvoiceUniqid) {
		toSerialize["invoice_uniqid"] = o.InvoiceUniqid
	}
	if !IsNil(o.PrevPaymentIntervalId) {
		toSerialize["prev_payment_interval_id"] = o.PrevPaymentIntervalId
	}
	if !IsNil(o.Idx) {
		toSerialize["idx"] = o.Idx
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.IntervalType) {
		toSerialize["interval_type"] = o.IntervalType
	}
	if !IsNil(o.PaymentType) {
		toSerialize["payment_type"] = o.PaymentType
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["payment_date"] = o.PaymentDate
	}
	if !IsNil(o.PaymentAttempts) {
		toSerialize["payment_attempts"] = o.PaymentAttempts
	}
	if !IsNil(o.LastPaymentAttemptDate) {
		toSerialize["last_payment_attempt_date"] = o.LastPaymentAttemptDate
	}
	if !IsNil(o.LastPaymentDetails) {
		toSerialize["last_payment_details"] = o.LastPaymentDetails
	}
	if !IsNil(o.NextPaymentAttemptDate) {
		toSerialize["next_payment_attempt_date"] = o.NextPaymentAttemptDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UsedCoupons) {
		toSerialize["used_coupons"] = o.UsedCoupons
	}
	if !IsNil(o.UsedCustomerBalance) {
		toSerialize["used_customer_balance"] = o.UsedCustomerBalance
	}
	if !IsNil(o.UsedCustomerBalanceCurrency) {
		toSerialize["used_customer_balance_currency"] = o.UsedCustomerBalanceCurrency
	}
	if !IsNil(o.UsedAddons) {
		toSerialize["used_addons"] = o.UsedAddons
	}
	if !IsNil(o.TrialEndingEmailSent) {
		toSerialize["trial_ending_email_sent"] = o.TrialEndingEmailSent
	}
	if !IsNil(o.UpcomingRenewalEmailSent) {
		toSerialize["upcoming_renewal_email_sent"] = o.UpcomingRenewalEmailSent
	}
	if !IsNil(o.StartEventProcessed) {
		toSerialize["start_event_processed"] = o.StartEventProcessed
	}
	if !IsNil(o.EndEventProcessed) {
		toSerialize["end_event_processed"] = o.EndEventProcessed
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completed_at"] = o.CompletedAt
	}
	if !IsNil(o.NextIntervalInfo) {
		toSerialize["next_interval_info"] = o.NextIntervalInfo
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.AutoChargeBlock) {
		toSerialize["auto_charge_block"] = o.AutoChargeBlock
	}
	if !IsNil(o.InvoiceStatus) {
		toSerialize["invoice_status"] = o.InvoiceStatus
	}
	if !IsNil(o.InvoiceGateway) {
		toSerialize["invoice_gateway"] = o.InvoiceGateway
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	if !IsNil(o.PaymentMethodId) {
		toSerialize["payment_method_id"] = o.PaymentMethodId
	}
	if !IsNil(o.PlanSubscriptionGateway) {
		toSerialize["plan_subscription_gateway"] = o.PlanSubscriptionGateway
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.ProductUniqid) {
		toSerialize["product_uniqid"] = o.ProductUniqid
	}
	if !IsNil(o.ProductAutoPaymentMethodRequired) {
		toSerialize["product_auto_payment_method_required"] = o.ProductAutoPaymentMethodRequired
	}
	return toSerialize, nil
}

type NullablePaymentInterval struct {
	value *PaymentInterval
	isSet bool
}

func (v NullablePaymentInterval) Get() *PaymentInterval {
	return v.value
}

func (v *NullablePaymentInterval) Set(val *PaymentInterval) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInterval) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInterval(val *PaymentInterval) *NullablePaymentInterval {
	return &NullablePaymentInterval{value: val, isSet: true}
}

func (v NullablePaymentInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


