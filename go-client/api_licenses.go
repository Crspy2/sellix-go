/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// LicensesAPIService LicensesAPI service
type LicensesAPIService service

type ApiCheckLicenseRequest struct {
	ctx context.Context
	ApiService *LicensesAPIService
	checkLicenseRequest *CheckLicenseRequest
	xSellixMerchant *string
}

// product licensing assign hardware ID JSON
func (r ApiCheckLicenseRequest) CheckLicenseRequest(checkLicenseRequest CheckLicenseRequest) ApiCheckLicenseRequest {
	r.checkLicenseRequest = &checkLicenseRequest
	return r
}

// The name of the store to perform actions on via the API
func (r ApiCheckLicenseRequest) XSellixMerchant(xSellixMerchant string) ApiCheckLicenseRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiCheckLicenseRequest) Execute() (*UpdateHardwareId200Response, *http.Response, error) {
	return r.ApiService.CheckLicenseExecute(r)
}

/*
CheckLicense Method for CheckLicense

Checks the validity of a license key and its hardware ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCheckLicenseRequest
*/
func (a *LicensesAPIService) CheckLicense(ctx context.Context) ApiCheckLicenseRequest {
	return ApiCheckLicenseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateHardwareId200Response
func (a *LicensesAPIService) CheckLicenseExecute(r ApiCheckLicenseRequest) (*UpdateHardwareId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateHardwareId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensesAPIService.CheckLicense")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/licensing/check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.checkLicenseRequest == nil {
		return localVarReturnValue, nil, reportError("checkLicenseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	// body params
	localVarPostBody = r.checkLicenseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CreateBlacklist400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetBlacklist404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateHardwareIdRequest struct {
	ctx context.Context
	ApiService *LicensesAPIService
	updateHardwareIdRequest *UpdateHardwareIdRequest
	xSellixMerchant *string
}

// product licensing assign hardware ID JSON
func (r ApiUpdateHardwareIdRequest) UpdateHardwareIdRequest(updateHardwareIdRequest UpdateHardwareIdRequest) ApiUpdateHardwareIdRequest {
	r.updateHardwareIdRequest = &updateHardwareIdRequest
	return r
}

// The name of the store to perform actions on via the API
func (r ApiUpdateHardwareIdRequest) XSellixMerchant(xSellixMerchant string) ApiUpdateHardwareIdRequest {
	r.xSellixMerchant = &xSellixMerchant
	return r
}

func (r ApiUpdateHardwareIdRequest) Execute() (*UpdateHardwareId200Response, *http.Response, error) {
	return r.ApiService.UpdateHardwareIdExecute(r)
}

/*
UpdateHardwareId Method for UpdateHardwareId

Assign an hardware ID to a license.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateHardwareIdRequest
*/
func (a *LicensesAPIService) UpdateHardwareId(ctx context.Context) ApiUpdateHardwareIdRequest {
	return ApiUpdateHardwareIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateHardwareId200Response
func (a *LicensesAPIService) UpdateHardwareIdExecute(r ApiUpdateHardwareIdRequest) (*UpdateHardwareId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateHardwareId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensesAPIService.UpdateHardwareId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/licensing/hardware_id"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateHardwareIdRequest == nil {
		return localVarReturnValue, nil, reportError("updateHardwareIdRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xSellixMerchant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Sellix-Merchant", r.xSellixMerchant, "simple", "")
	}
	// body params
	localVarPostBody = r.updateHardwareIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CreateBlacklist400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ListBlacklists401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
