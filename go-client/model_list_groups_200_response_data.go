/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListGroups200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListGroups200ResponseData{}

// ListGroups200ResponseData struct for ListGroups200ResponseData
type ListGroups200ResponseData struct {
	Groups []ListedGroup `json:"groups,omitempty"`
}

// NewListGroups200ResponseData instantiates a new ListGroups200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListGroups200ResponseData() *ListGroups200ResponseData {
	this := ListGroups200ResponseData{}
	return &this
}

// NewListGroups200ResponseDataWithDefaults instantiates a new ListGroups200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListGroups200ResponseDataWithDefaults() *ListGroups200ResponseData {
	this := ListGroups200ResponseData{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ListGroups200ResponseData) GetGroups() []ListedGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []ListedGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListGroups200ResponseData) GetGroupsOk() ([]ListedGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ListGroups200ResponseData) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []ListedGroup and assigns it to the Groups field.
func (o *ListGroups200ResponseData) SetGroups(v []ListedGroup) {
	o.Groups = v
}

func (o ListGroups200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListGroups200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	return toSerialize, nil
}

type NullableListGroups200ResponseData struct {
	value *ListGroups200ResponseData
	isSet bool
}

func (v NullableListGroups200ResponseData) Get() *ListGroups200ResponseData {
	return v.value
}

func (v *NullableListGroups200ResponseData) Set(val *ListGroups200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableListGroups200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableListGroups200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGroups200ResponseData(val *ListGroups200ResponseData) *NullableListGroups200ResponseData {
	return &NullableListGroups200ResponseData{value: val, isSet: true}
}

func (v NullableListGroups200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGroups200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


