/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeedbackProductCategoriesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackProductCategoriesInner{}

// FeedbackProductCategoriesInner struct for FeedbackProductCategoriesInner
type FeedbackProductCategoriesInner struct {
	// The title of the category
	Title *string `json:"title,omitempty"`
	// The unique id of the category
	Uniqid *string `json:"uniqid,omitempty"`
}

// NewFeedbackProductCategoriesInner instantiates a new FeedbackProductCategoriesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackProductCategoriesInner() *FeedbackProductCategoriesInner {
	this := FeedbackProductCategoriesInner{}
	return &this
}

// NewFeedbackProductCategoriesInnerWithDefaults instantiates a new FeedbackProductCategoriesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackProductCategoriesInnerWithDefaults() *FeedbackProductCategoriesInner {
	this := FeedbackProductCategoriesInner{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FeedbackProductCategoriesInner) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductCategoriesInner) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FeedbackProductCategoriesInner) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FeedbackProductCategoriesInner) SetTitle(v string) {
	o.Title = &v
}

// GetUniqid returns the Uniqid field value if set, zero value otherwise.
func (o *FeedbackProductCategoriesInner) GetUniqid() string {
	if o == nil || IsNil(o.Uniqid) {
		var ret string
		return ret
	}
	return *o.Uniqid
}

// GetUniqidOk returns a tuple with the Uniqid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductCategoriesInner) GetUniqidOk() (*string, bool) {
	if o == nil || IsNil(o.Uniqid) {
		return nil, false
	}
	return o.Uniqid, true
}

// HasUniqid returns a boolean if a field has been set.
func (o *FeedbackProductCategoriesInner) HasUniqid() bool {
	if o != nil && !IsNil(o.Uniqid) {
		return true
	}

	return false
}

// SetUniqid gets a reference to the given string and assigns it to the Uniqid field.
func (o *FeedbackProductCategoriesInner) SetUniqid(v string) {
	o.Uniqid = &v
}

func (o FeedbackProductCategoriesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackProductCategoriesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Uniqid) {
		toSerialize["uniqid"] = o.Uniqid
	}
	return toSerialize, nil
}

type NullableFeedbackProductCategoriesInner struct {
	value *FeedbackProductCategoriesInner
	isSet bool
}

func (v NullableFeedbackProductCategoriesInner) Get() *FeedbackProductCategoriesInner {
	return v.value
}

func (v *NullableFeedbackProductCategoriesInner) Set(val *FeedbackProductCategoriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackProductCategoriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackProductCategoriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackProductCategoriesInner(val *FeedbackProductCategoriesInner) *NullableFeedbackProductCategoriesInner {
	return &NullableFeedbackProductCategoriesInner{value: val, isSet: true}
}

func (v NullableFeedbackProductCategoriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackProductCategoriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


