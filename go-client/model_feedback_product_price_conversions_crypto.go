/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the FeedbackProductPriceConversionsCrypto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackProductPriceConversionsCrypto{}

// FeedbackProductPriceConversionsCrypto A list of the price of the product variant in various cryptocurrencies.
type FeedbackProductPriceConversionsCrypto struct {
	// The price of the product variant in APE.
	APE *string `json:"APE,omitempty"`
	// The price of the product variant in BCH.
	BCH *string `json:"BCH,omitempty"`
	// The price of the product variant in BNB.
	BNB *string `json:"BNB,omitempty"`
	// The price of the product variant in USDC_NATIVE.
	USDC_NATIVE *string `json:"USDC_NATIVE,omitempty"`
}

// NewFeedbackProductPriceConversionsCrypto instantiates a new FeedbackProductPriceConversionsCrypto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackProductPriceConversionsCrypto() *FeedbackProductPriceConversionsCrypto {
	this := FeedbackProductPriceConversionsCrypto{}
	return &this
}

// NewFeedbackProductPriceConversionsCryptoWithDefaults instantiates a new FeedbackProductPriceConversionsCrypto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackProductPriceConversionsCryptoWithDefaults() *FeedbackProductPriceConversionsCrypto {
	this := FeedbackProductPriceConversionsCrypto{}
	return &this
}

// GetAPE returns the APE field value if set, zero value otherwise.
func (o *FeedbackProductPriceConversionsCrypto) GetAPE() string {
	if o == nil || IsNil(o.APE) {
		var ret string
		return ret
	}
	return *o.APE
}

// GetAPEOk returns a tuple with the APE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductPriceConversionsCrypto) GetAPEOk() (*string, bool) {
	if o == nil || IsNil(o.APE) {
		return nil, false
	}
	return o.APE, true
}

// HasAPE returns a boolean if a field has been set.
func (o *FeedbackProductPriceConversionsCrypto) HasAPE() bool {
	if o != nil && !IsNil(o.APE) {
		return true
	}

	return false
}

// SetAPE gets a reference to the given string and assigns it to the APE field.
func (o *FeedbackProductPriceConversionsCrypto) SetAPE(v string) {
	o.APE = &v
}

// GetBCH returns the BCH field value if set, zero value otherwise.
func (o *FeedbackProductPriceConversionsCrypto) GetBCH() string {
	if o == nil || IsNil(o.BCH) {
		var ret string
		return ret
	}
	return *o.BCH
}

// GetBCHOk returns a tuple with the BCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductPriceConversionsCrypto) GetBCHOk() (*string, bool) {
	if o == nil || IsNil(o.BCH) {
		return nil, false
	}
	return o.BCH, true
}

// HasBCH returns a boolean if a field has been set.
func (o *FeedbackProductPriceConversionsCrypto) HasBCH() bool {
	if o != nil && !IsNil(o.BCH) {
		return true
	}

	return false
}

// SetBCH gets a reference to the given string and assigns it to the BCH field.
func (o *FeedbackProductPriceConversionsCrypto) SetBCH(v string) {
	o.BCH = &v
}

// GetBNB returns the BNB field value if set, zero value otherwise.
func (o *FeedbackProductPriceConversionsCrypto) GetBNB() string {
	if o == nil || IsNil(o.BNB) {
		var ret string
		return ret
	}
	return *o.BNB
}

// GetBNBOk returns a tuple with the BNB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductPriceConversionsCrypto) GetBNBOk() (*string, bool) {
	if o == nil || IsNil(o.BNB) {
		return nil, false
	}
	return o.BNB, true
}

// HasBNB returns a boolean if a field has been set.
func (o *FeedbackProductPriceConversionsCrypto) HasBNB() bool {
	if o != nil && !IsNil(o.BNB) {
		return true
	}

	return false
}

// SetBNB gets a reference to the given string and assigns it to the BNB field.
func (o *FeedbackProductPriceConversionsCrypto) SetBNB(v string) {
	o.BNB = &v
}

// GetUSDC_NATIVE returns the USDC_NATIVE field value if set, zero value otherwise.
func (o *FeedbackProductPriceConversionsCrypto) GetUSDC_NATIVE() string {
	if o == nil || IsNil(o.USDC_NATIVE) {
		var ret string
		return ret
	}
	return *o.USDC_NATIVE
}

// GetUSDC_NATIVEOk returns a tuple with the USDC_NATIVE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductPriceConversionsCrypto) GetUSDC_NATIVEOk() (*string, bool) {
	if o == nil || IsNil(o.USDC_NATIVE) {
		return nil, false
	}
	return o.USDC_NATIVE, true
}

// HasUSDC_NATIVE returns a boolean if a field has been set.
func (o *FeedbackProductPriceConversionsCrypto) HasUSDC_NATIVE() bool {
	if o != nil && !IsNil(o.USDC_NATIVE) {
		return true
	}

	return false
}

// SetUSDC_NATIVE gets a reference to the given string and assigns it to the USDC_NATIVE field.
func (o *FeedbackProductPriceConversionsCrypto) SetUSDC_NATIVE(v string) {
	o.USDC_NATIVE = &v
}

func (o FeedbackProductPriceConversionsCrypto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackProductPriceConversionsCrypto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.APE) {
		toSerialize["APE"] = o.APE
	}
	if !IsNil(o.BCH) {
		toSerialize["BCH"] = o.BCH
	}
	if !IsNil(o.BNB) {
		toSerialize["BNB"] = o.BNB
	}
	if !IsNil(o.USDC_NATIVE) {
		toSerialize["USDC_NATIVE"] = o.USDC_NATIVE
	}
	return toSerialize, nil
}

type NullableFeedbackProductPriceConversionsCrypto struct {
	value *FeedbackProductPriceConversionsCrypto
	isSet bool
}

func (v NullableFeedbackProductPriceConversionsCrypto) Get() *FeedbackProductPriceConversionsCrypto {
	return v.value
}

func (v *NullableFeedbackProductPriceConversionsCrypto) Set(val *FeedbackProductPriceConversionsCrypto) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackProductPriceConversionsCrypto) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackProductPriceConversionsCrypto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackProductPriceConversionsCrypto(val *FeedbackProductPriceConversionsCrypto) *NullableFeedbackProductPriceConversionsCrypto {
	return &NullableFeedbackProductPriceConversionsCrypto{value: val, isSet: true}
}

func (v NullableFeedbackProductPriceConversionsCrypto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackProductPriceConversionsCrypto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


