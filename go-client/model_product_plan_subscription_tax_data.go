/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the ProductPlanSubscriptionTaxData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductPlanSubscriptionTaxData{}

// ProductPlanSubscriptionTaxData struct for ProductPlanSubscriptionTaxData
type ProductPlanSubscriptionTaxData struct {
	// The country name
	Country *string `json:"country,omitempty"`
	// The 2 letter ISO code for the country
	CountryCode *string `json:"country_code,omitempty"`
}

// NewProductPlanSubscriptionTaxData instantiates a new ProductPlanSubscriptionTaxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductPlanSubscriptionTaxData() *ProductPlanSubscriptionTaxData {
	this := ProductPlanSubscriptionTaxData{}
	return &this
}

// NewProductPlanSubscriptionTaxDataWithDefaults instantiates a new ProductPlanSubscriptionTaxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductPlanSubscriptionTaxDataWithDefaults() *ProductPlanSubscriptionTaxData {
	this := ProductPlanSubscriptionTaxData{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ProductPlanSubscriptionTaxData) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanSubscriptionTaxData) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ProductPlanSubscriptionTaxData) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ProductPlanSubscriptionTaxData) SetCountry(v string) {
	o.Country = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ProductPlanSubscriptionTaxData) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPlanSubscriptionTaxData) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ProductPlanSubscriptionTaxData) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ProductPlanSubscriptionTaxData) SetCountryCode(v string) {
	o.CountryCode = &v
}

func (o ProductPlanSubscriptionTaxData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductPlanSubscriptionTaxData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	return toSerialize, nil
}

type NullableProductPlanSubscriptionTaxData struct {
	value *ProductPlanSubscriptionTaxData
	isSet bool
}

func (v NullableProductPlanSubscriptionTaxData) Get() *ProductPlanSubscriptionTaxData {
	return v.value
}

func (v *NullableProductPlanSubscriptionTaxData) Set(val *ProductPlanSubscriptionTaxData) {
	v.value = val
	v.isSet = true
}

func (v NullableProductPlanSubscriptionTaxData) IsSet() bool {
	return v.isSet
}

func (v *NullableProductPlanSubscriptionTaxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductPlanSubscriptionTaxData(val *ProductPlanSubscriptionTaxData) *NullableProductPlanSubscriptionTaxData {
	return &NullableProductPlanSubscriptionTaxData{value: val, isSet: true}
}

func (v NullableProductPlanSubscriptionTaxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductPlanSubscriptionTaxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


