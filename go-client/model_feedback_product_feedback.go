/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeedbackProductFeedback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackProductFeedback{}

// FeedbackProductFeedback struct for FeedbackProductFeedback
type FeedbackProductFeedback struct {
	// Count of all the feedback.
	Total *int32 `json:"total,omitempty"`
	// Count of positive feedback.
	Positive *int32 `json:"positive,omitempty"`
	// Count of neutral feedback.
	Neutral *int32 `json:"neutral,omitempty"`
	// Count of negative feedback.
	Negative *int32 `json:"negative,omitempty"`
	Numbers *map[string]int32 `json:"numbers,omitempty"`
	List []FeedbackProductFeedbackListInner `json:"list,omitempty"`
}

// NewFeedbackProductFeedback instantiates a new FeedbackProductFeedback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackProductFeedback() *FeedbackProductFeedback {
	this := FeedbackProductFeedback{}
	return &this
}

// NewFeedbackProductFeedbackWithDefaults instantiates a new FeedbackProductFeedback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackProductFeedbackWithDefaults() *FeedbackProductFeedback {
	this := FeedbackProductFeedback{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *FeedbackProductFeedback) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductFeedback) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *FeedbackProductFeedback) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *FeedbackProductFeedback) SetTotal(v int32) {
	o.Total = &v
}

// GetPositive returns the Positive field value if set, zero value otherwise.
func (o *FeedbackProductFeedback) GetPositive() int32 {
	if o == nil || IsNil(o.Positive) {
		var ret int32
		return ret
	}
	return *o.Positive
}

// GetPositiveOk returns a tuple with the Positive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductFeedback) GetPositiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Positive) {
		return nil, false
	}
	return o.Positive, true
}

// HasPositive returns a boolean if a field has been set.
func (o *FeedbackProductFeedback) HasPositive() bool {
	if o != nil && !IsNil(o.Positive) {
		return true
	}

	return false
}

// SetPositive gets a reference to the given int32 and assigns it to the Positive field.
func (o *FeedbackProductFeedback) SetPositive(v int32) {
	o.Positive = &v
}

// GetNeutral returns the Neutral field value if set, zero value otherwise.
func (o *FeedbackProductFeedback) GetNeutral() int32 {
	if o == nil || IsNil(o.Neutral) {
		var ret int32
		return ret
	}
	return *o.Neutral
}

// GetNeutralOk returns a tuple with the Neutral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductFeedback) GetNeutralOk() (*int32, bool) {
	if o == nil || IsNil(o.Neutral) {
		return nil, false
	}
	return o.Neutral, true
}

// HasNeutral returns a boolean if a field has been set.
func (o *FeedbackProductFeedback) HasNeutral() bool {
	if o != nil && !IsNil(o.Neutral) {
		return true
	}

	return false
}

// SetNeutral gets a reference to the given int32 and assigns it to the Neutral field.
func (o *FeedbackProductFeedback) SetNeutral(v int32) {
	o.Neutral = &v
}

// GetNegative returns the Negative field value if set, zero value otherwise.
func (o *FeedbackProductFeedback) GetNegative() int32 {
	if o == nil || IsNil(o.Negative) {
		var ret int32
		return ret
	}
	return *o.Negative
}

// GetNegativeOk returns a tuple with the Negative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductFeedback) GetNegativeOk() (*int32, bool) {
	if o == nil || IsNil(o.Negative) {
		return nil, false
	}
	return o.Negative, true
}

// HasNegative returns a boolean if a field has been set.
func (o *FeedbackProductFeedback) HasNegative() bool {
	if o != nil && !IsNil(o.Negative) {
		return true
	}

	return false
}

// SetNegative gets a reference to the given int32 and assigns it to the Negative field.
func (o *FeedbackProductFeedback) SetNegative(v int32) {
	o.Negative = &v
}

// GetNumbers returns the Numbers field value if set, zero value otherwise.
func (o *FeedbackProductFeedback) GetNumbers() map[string]int32 {
	if o == nil || IsNil(o.Numbers) {
		var ret map[string]int32
		return ret
	}
	return *o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductFeedback) GetNumbersOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Numbers) {
		return nil, false
	}
	return o.Numbers, true
}

// HasNumbers returns a boolean if a field has been set.
func (o *FeedbackProductFeedback) HasNumbers() bool {
	if o != nil && !IsNil(o.Numbers) {
		return true
	}

	return false
}

// SetNumbers gets a reference to the given map[string]int32 and assigns it to the Numbers field.
func (o *FeedbackProductFeedback) SetNumbers(v map[string]int32) {
	o.Numbers = &v
}

// GetList returns the List field value if set, zero value otherwise.
func (o *FeedbackProductFeedback) GetList() []FeedbackProductFeedbackListInner {
	if o == nil || IsNil(o.List) {
		var ret []FeedbackProductFeedbackListInner
		return ret
	}
	return o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackProductFeedback) GetListOk() ([]FeedbackProductFeedbackListInner, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *FeedbackProductFeedback) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given []FeedbackProductFeedbackListInner and assigns it to the List field.
func (o *FeedbackProductFeedback) SetList(v []FeedbackProductFeedbackListInner) {
	o.List = v
}

func (o FeedbackProductFeedback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackProductFeedback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Positive) {
		toSerialize["positive"] = o.Positive
	}
	if !IsNil(o.Neutral) {
		toSerialize["neutral"] = o.Neutral
	}
	if !IsNil(o.Negative) {
		toSerialize["negative"] = o.Negative
	}
	if !IsNil(o.Numbers) {
		toSerialize["numbers"] = o.Numbers
	}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableFeedbackProductFeedback struct {
	value *FeedbackProductFeedback
	isSet bool
}

func (v NullableFeedbackProductFeedback) Get() *FeedbackProductFeedback {
	return v.value
}

func (v *NullableFeedbackProductFeedback) Set(val *FeedbackProductFeedback) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackProductFeedback) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackProductFeedback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackProductFeedback(val *FeedbackProductFeedback) *NullableFeedbackProductFeedback {
	return &NullableFeedbackProductFeedback{value: val, isSet: true}
}

func (v NullableFeedbackProductFeedback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackProductFeedback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


