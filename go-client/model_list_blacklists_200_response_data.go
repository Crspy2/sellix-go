/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the ListBlacklists200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListBlacklists200ResponseData{}

// ListBlacklists200ResponseData struct for ListBlacklists200ResponseData
type ListBlacklists200ResponseData struct {
	Blacklists []Blacklist `json:"blacklists,omitempty"`
}

// NewListBlacklists200ResponseData instantiates a new ListBlacklists200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBlacklists200ResponseData() *ListBlacklists200ResponseData {
	this := ListBlacklists200ResponseData{}
	return &this
}

// NewListBlacklists200ResponseDataWithDefaults instantiates a new ListBlacklists200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBlacklists200ResponseDataWithDefaults() *ListBlacklists200ResponseData {
	this := ListBlacklists200ResponseData{}
	return &this
}

// GetBlacklists returns the Blacklists field value if set, zero value otherwise.
func (o *ListBlacklists200ResponseData) GetBlacklists() []Blacklist {
	if o == nil || IsNil(o.Blacklists) {
		var ret []Blacklist
		return ret
	}
	return o.Blacklists
}

// GetBlacklistsOk returns a tuple with the Blacklists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBlacklists200ResponseData) GetBlacklistsOk() ([]Blacklist, bool) {
	if o == nil || IsNil(o.Blacklists) {
		return nil, false
	}
	return o.Blacklists, true
}

// HasBlacklists returns a boolean if a field has been set.
func (o *ListBlacklists200ResponseData) HasBlacklists() bool {
	if o != nil && !IsNil(o.Blacklists) {
		return true
	}

	return false
}

// SetBlacklists gets a reference to the given []Blacklist and assigns it to the Blacklists field.
func (o *ListBlacklists200ResponseData) SetBlacklists(v []Blacklist) {
	o.Blacklists = v
}

func (o ListBlacklists200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListBlacklists200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blacklists) {
		toSerialize["blacklists"] = o.Blacklists
	}
	return toSerialize, nil
}

type NullableListBlacklists200ResponseData struct {
	value *ListBlacklists200ResponseData
	isSet bool
}

func (v NullableListBlacklists200ResponseData) Get() *ListBlacklists200ResponseData {
	return v.value
}

func (v *NullableListBlacklists200ResponseData) Set(val *ListBlacklists200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableListBlacklists200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableListBlacklists200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBlacklists200ResponseData(val *ListBlacklists200ResponseData) *NullableListBlacklists200ResponseData {
	return &NullableListBlacklists200ResponseData{value: val, isSet: true}
}

func (v NullableListBlacklists200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBlacklists200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


