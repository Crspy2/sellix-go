/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateSubscriptionToCustomer200Response - struct for CreateSubscriptionToCustomer200Response
type CreateSubscriptionToCustomer200Response struct {
	SubscriptionInvoiceResponse *SubscriptionInvoiceResponse
	SubscriptionTrialResponse *SubscriptionTrialResponse
}

// SubscriptionInvoiceResponseAsCreateSubscriptionToCustomer200Response is a convenience function that returns SubscriptionInvoiceResponse wrapped in CreateSubscriptionToCustomer200Response
func SubscriptionInvoiceResponseAsCreateSubscriptionToCustomer200Response(v *SubscriptionInvoiceResponse) CreateSubscriptionToCustomer200Response {
	return CreateSubscriptionToCustomer200Response{
		SubscriptionInvoiceResponse: v,
	}
}

// SubscriptionTrialResponseAsCreateSubscriptionToCustomer200Response is a convenience function that returns SubscriptionTrialResponse wrapped in CreateSubscriptionToCustomer200Response
func SubscriptionTrialResponseAsCreateSubscriptionToCustomer200Response(v *SubscriptionTrialResponse) CreateSubscriptionToCustomer200Response {
	return CreateSubscriptionToCustomer200Response{
		SubscriptionTrialResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSubscriptionToCustomer200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SubscriptionInvoiceResponse
	err = newStrictDecoder(data).Decode(&dst.SubscriptionInvoiceResponse)
	if err == nil {
		jsonSubscriptionInvoiceResponse, _ := json.Marshal(dst.SubscriptionInvoiceResponse)
		if string(jsonSubscriptionInvoiceResponse) == "{}" { // empty struct
			dst.SubscriptionInvoiceResponse = nil
		} else {
			if err = validator.Validate(dst.SubscriptionInvoiceResponse); err != nil {
				dst.SubscriptionInvoiceResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubscriptionInvoiceResponse = nil
	}

	// try to unmarshal data into SubscriptionTrialResponse
	err = newStrictDecoder(data).Decode(&dst.SubscriptionTrialResponse)
	if err == nil {
		jsonSubscriptionTrialResponse, _ := json.Marshal(dst.SubscriptionTrialResponse)
		if string(jsonSubscriptionTrialResponse) == "{}" { // empty struct
			dst.SubscriptionTrialResponse = nil
		} else {
			if err = validator.Validate(dst.SubscriptionTrialResponse); err != nil {
				dst.SubscriptionTrialResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubscriptionTrialResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SubscriptionInvoiceResponse = nil
		dst.SubscriptionTrialResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateSubscriptionToCustomer200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateSubscriptionToCustomer200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSubscriptionToCustomer200Response) MarshalJSON() ([]byte, error) {
	if src.SubscriptionInvoiceResponse != nil {
		return json.Marshal(&src.SubscriptionInvoiceResponse)
	}

	if src.SubscriptionTrialResponse != nil {
		return json.Marshal(&src.SubscriptionTrialResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSubscriptionToCustomer200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SubscriptionInvoiceResponse != nil {
		return obj.SubscriptionInvoiceResponse
	}

	if obj.SubscriptionTrialResponse != nil {
		return obj.SubscriptionTrialResponse
	}

	// all schemas are nil
	return nil
}

type NullableCreateSubscriptionToCustomer200Response struct {
	value *CreateSubscriptionToCustomer200Response
	isSet bool
}

func (v NullableCreateSubscriptionToCustomer200Response) Get() *CreateSubscriptionToCustomer200Response {
	return v.value
}

func (v *NullableCreateSubscriptionToCustomer200Response) Set(val *CreateSubscriptionToCustomer200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubscriptionToCustomer200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubscriptionToCustomer200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubscriptionToCustomer200Response(val *CreateSubscriptionToCustomer200Response) *NullableCreateSubscriptionToCustomer200Response {
	return &NullableCreateSubscriptionToCustomer200Response{value: val, isSet: true}
}

func (v NullableCreateSubscriptionToCustomer200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubscriptionToCustomer200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


