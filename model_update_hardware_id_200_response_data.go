/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the UpdateHardwareId200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateHardwareId200ResponseData{}

// UpdateHardwareId200ResponseData struct for UpdateHardwareId200ResponseData
type UpdateHardwareId200ResponseData struct {
	License *License `json:"license,omitempty"`
}

// NewUpdateHardwareId200ResponseData instantiates a new UpdateHardwareId200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateHardwareId200ResponseData() *UpdateHardwareId200ResponseData {
	this := UpdateHardwareId200ResponseData{}
	return &this
}

// NewUpdateHardwareId200ResponseDataWithDefaults instantiates a new UpdateHardwareId200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateHardwareId200ResponseDataWithDefaults() *UpdateHardwareId200ResponseData {
	this := UpdateHardwareId200ResponseData{}
	return &this
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *UpdateHardwareId200ResponseData) GetLicense() License {
	if o == nil || IsNil(o.License) {
		var ret License
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHardwareId200ResponseData) GetLicenseOk() (*License, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *UpdateHardwareId200ResponseData) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given License and assigns it to the License field.
func (o *UpdateHardwareId200ResponseData) SetLicense(v License) {
	o.License = &v
}

func (o UpdateHardwareId200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateHardwareId200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	return toSerialize, nil
}

type NullableUpdateHardwareId200ResponseData struct {
	value *UpdateHardwareId200ResponseData
	isSet bool
}

func (v NullableUpdateHardwareId200ResponseData) Get() *UpdateHardwareId200ResponseData {
	return v.value
}

func (v *NullableUpdateHardwareId200ResponseData) Set(val *UpdateHardwareId200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateHardwareId200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateHardwareId200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateHardwareId200ResponseData(val *UpdateHardwareId200ResponseData) *NullableUpdateHardwareId200ResponseData {
	return &NullableUpdateHardwareId200ResponseData{value: val, isSet: true}
}

func (v NullableUpdateHardwareId200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateHardwareId200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


