/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCategoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCategoryRequest{}

// CreateCategoryRequest struct for CreateCategoryRequest
type CreateCategoryRequest struct {
	Title string `json:"title"`
	Unlisted *bool `json:"unlisted,omitempty"`
	SortPriority *int32 `json:"sort_priority,omitempty"`
	ProductsBound []string `json:"products_bound,omitempty"`
	GroupsBound []string `json:"groups_bound,omitempty"`
}

type _CreateCategoryRequest CreateCategoryRequest

// NewCreateCategoryRequest instantiates a new CreateCategoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCategoryRequest(title string) *CreateCategoryRequest {
	this := CreateCategoryRequest{}
	this.Title = title
	return &this
}

// NewCreateCategoryRequestWithDefaults instantiates a new CreateCategoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCategoryRequestWithDefaults() *CreateCategoryRequest {
	this := CreateCategoryRequest{}
	return &this
}

// GetTitle returns the Title field value
func (o *CreateCategoryRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CreateCategoryRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CreateCategoryRequest) SetTitle(v string) {
	o.Title = v
}

// GetUnlisted returns the Unlisted field value if set, zero value otherwise.
func (o *CreateCategoryRequest) GetUnlisted() bool {
	if o == nil || IsNil(o.Unlisted) {
		var ret bool
		return ret
	}
	return *o.Unlisted
}

// GetUnlistedOk returns a tuple with the Unlisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCategoryRequest) GetUnlistedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unlisted) {
		return nil, false
	}
	return o.Unlisted, true
}

// HasUnlisted returns a boolean if a field has been set.
func (o *CreateCategoryRequest) HasUnlisted() bool {
	if o != nil && !IsNil(o.Unlisted) {
		return true
	}

	return false
}

// SetUnlisted gets a reference to the given bool and assigns it to the Unlisted field.
func (o *CreateCategoryRequest) SetUnlisted(v bool) {
	o.Unlisted = &v
}

// GetSortPriority returns the SortPriority field value if set, zero value otherwise.
func (o *CreateCategoryRequest) GetSortPriority() int32 {
	if o == nil || IsNil(o.SortPriority) {
		var ret int32
		return ret
	}
	return *o.SortPriority
}

// GetSortPriorityOk returns a tuple with the SortPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCategoryRequest) GetSortPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.SortPriority) {
		return nil, false
	}
	return o.SortPriority, true
}

// HasSortPriority returns a boolean if a field has been set.
func (o *CreateCategoryRequest) HasSortPriority() bool {
	if o != nil && !IsNil(o.SortPriority) {
		return true
	}

	return false
}

// SetSortPriority gets a reference to the given int32 and assigns it to the SortPriority field.
func (o *CreateCategoryRequest) SetSortPriority(v int32) {
	o.SortPriority = &v
}

// GetProductsBound returns the ProductsBound field value if set, zero value otherwise.
func (o *CreateCategoryRequest) GetProductsBound() []string {
	if o == nil || IsNil(o.ProductsBound) {
		var ret []string
		return ret
	}
	return o.ProductsBound
}

// GetProductsBoundOk returns a tuple with the ProductsBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCategoryRequest) GetProductsBoundOk() ([]string, bool) {
	if o == nil || IsNil(o.ProductsBound) {
		return nil, false
	}
	return o.ProductsBound, true
}

// HasProductsBound returns a boolean if a field has been set.
func (o *CreateCategoryRequest) HasProductsBound() bool {
	if o != nil && !IsNil(o.ProductsBound) {
		return true
	}

	return false
}

// SetProductsBound gets a reference to the given []string and assigns it to the ProductsBound field.
func (o *CreateCategoryRequest) SetProductsBound(v []string) {
	o.ProductsBound = v
}

// GetGroupsBound returns the GroupsBound field value if set, zero value otherwise.
func (o *CreateCategoryRequest) GetGroupsBound() []string {
	if o == nil || IsNil(o.GroupsBound) {
		var ret []string
		return ret
	}
	return o.GroupsBound
}

// GetGroupsBoundOk returns a tuple with the GroupsBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCategoryRequest) GetGroupsBoundOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupsBound) {
		return nil, false
	}
	return o.GroupsBound, true
}

// HasGroupsBound returns a boolean if a field has been set.
func (o *CreateCategoryRequest) HasGroupsBound() bool {
	if o != nil && !IsNil(o.GroupsBound) {
		return true
	}

	return false
}

// SetGroupsBound gets a reference to the given []string and assigns it to the GroupsBound field.
func (o *CreateCategoryRequest) SetGroupsBound(v []string) {
	o.GroupsBound = v
}

func (o CreateCategoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCategoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if !IsNil(o.Unlisted) {
		toSerialize["unlisted"] = o.Unlisted
	}
	if !IsNil(o.SortPriority) {
		toSerialize["sort_priority"] = o.SortPriority
	}
	if !IsNil(o.ProductsBound) {
		toSerialize["products_bound"] = o.ProductsBound
	}
	if !IsNil(o.GroupsBound) {
		toSerialize["groups_bound"] = o.GroupsBound
	}
	return toSerialize, nil
}

func (o *CreateCategoryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCategoryRequest := _CreateCategoryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCategoryRequest)

	if err != nil {
		return err
	}

	*o = CreateCategoryRequest(varCreateCategoryRequest)

	return err
}

type NullableCreateCategoryRequest struct {
	value *CreateCategoryRequest
	isSet bool
}

func (v NullableCreateCategoryRequest) Get() *CreateCategoryRequest {
	return v.value
}

func (v *NullableCreateCategoryRequest) Set(val *CreateCategoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCategoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCategoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCategoryRequest(val *CreateCategoryRequest) *NullableCreateCategoryRequest {
	return &NullableCreateCategoryRequest{value: val, isSet: true}
}

func (v NullableCreateCategoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCategoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


