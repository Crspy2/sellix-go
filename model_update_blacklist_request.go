/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
)

// checks if the UpdateBlacklistRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateBlacklistRequest{}

// UpdateBlacklistRequest struct for UpdateBlacklistRequest
type UpdateBlacklistRequest struct {
	Type *string `json:"type,omitempty"`
	Data *string `json:"data,omitempty"`
	Note *string `json:"note,omitempty"`
}

// NewUpdateBlacklistRequest instantiates a new UpdateBlacklistRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBlacklistRequest() *UpdateBlacklistRequest {
	this := UpdateBlacklistRequest{}
	return &this
}

// NewUpdateBlacklistRequestWithDefaults instantiates a new UpdateBlacklistRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBlacklistRequestWithDefaults() *UpdateBlacklistRequest {
	this := UpdateBlacklistRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateBlacklistRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBlacklistRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateBlacklistRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateBlacklistRequest) SetType(v string) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UpdateBlacklistRequest) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBlacklistRequest) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UpdateBlacklistRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *UpdateBlacklistRequest) SetData(v string) {
	o.Data = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *UpdateBlacklistRequest) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBlacklistRequest) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *UpdateBlacklistRequest) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *UpdateBlacklistRequest) SetNote(v string) {
	o.Note = &v
}

func (o UpdateBlacklistRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateBlacklistRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableUpdateBlacklistRequest struct {
	value *UpdateBlacklistRequest
	isSet bool
}

func (v NullableUpdateBlacklistRequest) Get() *UpdateBlacklistRequest {
	return v.value
}

func (v *NullableUpdateBlacklistRequest) Set(val *UpdateBlacklistRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBlacklistRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBlacklistRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBlacklistRequest(val *UpdateBlacklistRequest) *NullableUpdateBlacklistRequest {
	return &NullableUpdateBlacklistRequest{value: val, isSet: true}
}

func (v NullableUpdateBlacklistRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBlacklistRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


