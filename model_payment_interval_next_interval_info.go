/*
Sellix Developers API

Sellix public API for developers to access merchant resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sellix

import (
	"encoding/json"
	"time"
)

// checks if the PaymentIntervalNextIntervalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentIntervalNextIntervalInfo{}

// PaymentIntervalNextIntervalInfo struct for PaymentIntervalNextIntervalInfo
type PaymentIntervalNextIntervalInfo struct {
	// The type of interval
	Type *string `json:"type,omitempty"`
	// The timestamp for when the payment interval ended
	EndDate *time.Time `json:"end_date,omitempty"`
	// The timestamp for when the payment interval started
	StartDate *time.Time `json:"start_date,omitempty"`
	// The timestamp for when the payment was made
	PaymentDate *time.Time `json:"payment_date,omitempty"`
	// The billing type of the payment interval
	PaymentType *string `json:"payment_type,omitempty"`
}

// NewPaymentIntervalNextIntervalInfo instantiates a new PaymentIntervalNextIntervalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentIntervalNextIntervalInfo() *PaymentIntervalNextIntervalInfo {
	this := PaymentIntervalNextIntervalInfo{}
	return &this
}

// NewPaymentIntervalNextIntervalInfoWithDefaults instantiates a new PaymentIntervalNextIntervalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentIntervalNextIntervalInfoWithDefaults() *PaymentIntervalNextIntervalInfo {
	this := PaymentIntervalNextIntervalInfo{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentIntervalNextIntervalInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentIntervalNextIntervalInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentIntervalNextIntervalInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentIntervalNextIntervalInfo) SetType(v string) {
	o.Type = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PaymentIntervalNextIntervalInfo) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentIntervalNextIntervalInfo) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PaymentIntervalNextIntervalInfo) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *PaymentIntervalNextIntervalInfo) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PaymentIntervalNextIntervalInfo) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentIntervalNextIntervalInfo) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PaymentIntervalNextIntervalInfo) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *PaymentIntervalNextIntervalInfo) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *PaymentIntervalNextIntervalInfo) GetPaymentDate() time.Time {
	if o == nil || IsNil(o.PaymentDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentIntervalNextIntervalInfo) GetPaymentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *PaymentIntervalNextIntervalInfo) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given time.Time and assigns it to the PaymentDate field.
func (o *PaymentIntervalNextIntervalInfo) SetPaymentDate(v time.Time) {
	o.PaymentDate = &v
}

// GetPaymentType returns the PaymentType field value if set, zero value otherwise.
func (o *PaymentIntervalNextIntervalInfo) GetPaymentType() string {
	if o == nil || IsNil(o.PaymentType) {
		var ret string
		return ret
	}
	return *o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentIntervalNextIntervalInfo) GetPaymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentType) {
		return nil, false
	}
	return o.PaymentType, true
}

// HasPaymentType returns a boolean if a field has been set.
func (o *PaymentIntervalNextIntervalInfo) HasPaymentType() bool {
	if o != nil && !IsNil(o.PaymentType) {
		return true
	}

	return false
}

// SetPaymentType gets a reference to the given string and assigns it to the PaymentType field.
func (o *PaymentIntervalNextIntervalInfo) SetPaymentType(v string) {
	o.PaymentType = &v
}

func (o PaymentIntervalNextIntervalInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentIntervalNextIntervalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["payment_date"] = o.PaymentDate
	}
	if !IsNil(o.PaymentType) {
		toSerialize["payment_type"] = o.PaymentType
	}
	return toSerialize, nil
}

type NullablePaymentIntervalNextIntervalInfo struct {
	value *PaymentIntervalNextIntervalInfo
	isSet bool
}

func (v NullablePaymentIntervalNextIntervalInfo) Get() *PaymentIntervalNextIntervalInfo {
	return v.value
}

func (v *NullablePaymentIntervalNextIntervalInfo) Set(val *PaymentIntervalNextIntervalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentIntervalNextIntervalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentIntervalNextIntervalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentIntervalNextIntervalInfo(val *PaymentIntervalNextIntervalInfo) *NullablePaymentIntervalNextIntervalInfo {
	return &NullablePaymentIntervalNextIntervalInfo{value: val, isSet: true}
}

func (v NullablePaymentIntervalNextIntervalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentIntervalNextIntervalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


